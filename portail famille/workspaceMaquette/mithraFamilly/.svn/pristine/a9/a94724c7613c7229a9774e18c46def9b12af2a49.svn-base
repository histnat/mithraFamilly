package com.sonovision.openconv.modules.fileaccess;

import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryIteratorException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;

import com.sedoc.toolbox.LogMes;
import com.sedoc.toolbox.SpringBeanProvider;
import com.sedoc.toolbox.bean.PDFTransformService;
import com.sedoc.toolbox.bean.UtilsService;
import com.sonovision.openconv.codification.Codification;
import com.sonovision.openconv.codification.exception.CodificationException;
import com.sonovision.openconv.log.model.LoggerLevel;
import com.sonovision.openconv.model.TreatedObject;
import com.sonovision.openconv.modules.fileaccess.exception.LoadFileException;
import com.sonovision.openconv.service.FileService;
import com.sonovision.openconv.service.impl.OpenConvServiceImpl;
import com.sonovision.openconv.wf.WFTask;
import com.sonovision.openconv.wf.WFTaskHelper;
import com.sonovision.openconv.wf.model.ParameterDetailled;
import com.sonovision.openconv.wf.model.ParameterTypes;

@Component
@Scope(value = WebApplicationContext.SCOPE_SESSION)
public class TaskLoadFileZip extends TaskLoadFile {

	
//	 parameter inputFolder
	public final static String PARAMETER_LOADFILE_INPUT_ZIPFILE = "inZipFile";
	
	 	
	@Autowired
	private FileService fileService;
	
	//I must init spring composent, buti have loop on this class. this variable is for skip loop. I think it will be better if we use @Configure. next time
	private static boolean initrun = false;
	
	public TaskLoadFileZip() {
		super();
//		initClass();
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -7764367737889004545L;

	public String run(HashMap<String, TreatedObject> treatedObjectHash) {
		if(!checkRequiredParams())
			return LoggerLevel.FATAL.getValue().toString();
		initClass();
		dbLogger.logTask("Dezippage du zip d'entr√©e", LoggerLevel.INFO);
		String inputZipFile=(String) parametersRunning.get(PARAMETER_LOADFILE_INPUT_ZIPFILE);
		//unzip in zipfile to idExeDirectory
		try {
			fileService.unzip(inputZipFile, dbLogger.getFolderIn());
		} catch (IOException e1) {
		// TODO Auto-generated catch block
		LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, inputZipFile+" can't be unzipped:" + e1.getMessage());
		}
		
		return super.run(treatedObjectHash);
	}

	@Override
	public HashMap<String, ParameterTypes> getRequiredParams() {
		super.getRequiredParams();
		parametersRequired.put(PARAMETER_LOADFILE_INPUT_ZIPFILE, ParameterTypes.FILE);
		return parametersRequired;
	}

	@Override
	public List<ParameterDetailled> getRequiredDetailledParameterList(Locale locale) {
		super.getRequiredDetailledParameterList(locale);
		parametersRequired.put(PARAMETER_LOADFILE_INPUT_ZIPFILE, ParameterTypes.FILE);
		return super.procedeRequiredParameterList(locale);
	}
	
	public void initClass() {
		if (!initrun) {
			initrun = true;
			if (utilsService == null) {
				utilsService = (UtilsService) SpringBeanProvider.getBean("UtilsService");
			}
			if (fileService == null) {
				fileService = (FileService) SpringBeanProvider.getBean("FileService");
			}
			initrun = false;
		}
	}

}
