package com.sonovision.openconv.ws.controller;


import java.util.List;


import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.RestController;


import com.sonovision.openconv.db.exception.DBNONullException;
import com.sonovision.openconv.db.exception.DBNOUniqueException;

import com.sonovision.openconv.db.vo.execution.CoScenario;
import com.sonovision.openconv.ws.controller.model.ScenarioDetailledModel;
import com.sonovision.openconv.ws.controller.model.TaskParameterModel;

@RequestMapping("/rest")
//@CrossOrigin
@RestController
public class ScenarioControllerPOST extends ControllerHelper{
	
	@RequestMapping(value="/conv/scenario/save", method = RequestMethod.POST)
	public ResponseEntity<String> save(@RequestBody ScenarioDetailledModel scenarioDetailledModel) {

		try {
			dbExecutionService.save(serviceMapper.getOrUpdateCoScenario(dbExecutionService.findById(scenarioDetailledModel.getId()), scenarioDetailledModel));
		} catch (DBNONullException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity("DBNOUniqueException scenario" + scenarioDetailledModel.getName(), HttpStatus.NOT_FOUND);
		} catch (DBNOUniqueException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity("DBNOUniqueException scenario" + scenarioDetailledModel.getName(), HttpStatus.NOT_FOUND);
		}
	    return new ResponseEntity<String>(scenarioDetailledModel.getId(), HttpStatus.CREATED);
	}
  
	String user="lee";
	@RequestMapping(value="/conv/scenario/{id}/delete", method = RequestMethod.DELETE)
	public ResponseEntity<String> delete(@PathVariable String id) {
		  ScenarioDetailledModel scenarioModel= serviceMapper.getScenarioDetailledModel(dbExecutionService.findById(id));
		if(!scenarioModel.getCreatorName().equals(user))
			return new ResponseEntity("delete scenario not possible : " + user+" not owner", HttpStatus.NOT_FOUND);
		dbExecutionService.deleteScenario(id);
		return new ResponseEntity(id, HttpStatus.OK);

	}
	
	
	
	//rest/conv/scenario/{id}/run ->	run du scenario
	@RequestMapping(value="/conv/scenario/{id}/run", method =  RequestMethod.POST, consumes = "application/json")
	public ResponseEntity<ScenarioDetailledModel> run(@PathVariable("id") String id,@RequestBody List<TaskParameterModel> parameterList){
		CoScenario coScenarioDb=dbExecutionService.findById(id);

		if (coScenarioDb == null) {
			return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
		}
		openConvService.launchSequence(coScenarioDb,parameterList);
	    return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.CREATED);
	}
	
	/* exemple de List<TaskParameterModel> parameterList
  [
   {
          "id": {
            "taskId": "1",
            "parameterName": "inputFolder"
          },
          "label": "R\ufffdpertoire d'entr\ufffde",
          "value": "\/xml\/cobra",
          "code": "inputFolder",
          "type": "FILE",
          "descr": "R\ufffdpertoire des fichiers \ufffd charger"
        },
    {
          "id": {
            "taskId": "1",
            "parameterName": "extensionFilter"
          },
          "label": "Extension du filtre",
          "value": null,
          "code": "extensionFilter",
          "type": "TXT",
          "descr": "Description extension du filtre"
        }
  ]
*/
}
