package com.sonovision.openconv.ws.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.sonovision.openconv.db.dao.CoHistoryExeDao;
import com.sonovision.openconv.db.dao.CoScenarioDao;
import com.sonovision.openconv.db.dao.ConversionDao;
import com.sonovision.openconv.db.dao.LogLineDao;
import com.sonovision.openconv.db.exception.DBNONullException;
import com.sonovision.openconv.db.exception.DBNOUniqueException;
import com.sonovision.openconv.db.vo.LogLine;
import com.sonovision.openconv.db.vo.execution.CoHistoryExe;
import com.sonovision.openconv.db.vo.execution.CoScenario;
import com.sonovision.openconv.ws.controller.model.ScenarioDetailledModel;

@RequestMapping("/rest")
//@CrossOrigin
@RestController
public class ScenarioControllerPOST extends ControllerHelper{
	
	@RequestMapping(value="/conv/scenario/save", method = RequestMethod.POST)
	public ResponseEntity<String> save(@RequestBody ScenarioDetailledModel scenarioDetailledModel) {

		try {
			dbExecutionService.save(serviceMapper.getOrUpdateCoScenario(dbExecutionService.findById(scenarioDetailledModel.getId()), scenarioDetailledModel));
		} catch (DBNONullException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity("DBNOUniqueException scenario" + scenarioDetailledModel.getName(), HttpStatus.NOT_FOUND);
		} catch (DBNOUniqueException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity("DBNOUniqueException scenario" + scenarioDetailledModel.getName(), HttpStatus.NOT_FOUND);
		}
	    return new ResponseEntity<String>(scenarioDetailledModel.getId(), HttpStatus.CREATED);
	}
  
	String user="lee";
	@RequestMapping(value="/conv/scenario/{id}/delete", method = RequestMethod.DELETE)
	public ResponseEntity<String> delete(@PathVariable String id) {
		  ScenarioDetailledModel scenarioModel= serviceMapper.getScenarioDetailledModel(dbExecutionService.findById(id));
		if(!scenarioModel.getCreatorName().equals(user))
			return new ResponseEntity("delete scenario not possible : " + user+" not owner", HttpStatus.NOT_FOUND);
		dbExecutionService.deleteScenario(id);
		return new ResponseEntity(id, HttpStatus.OK);

	}
	
	
	
	///Run 	-> command lui fournir tous les paramètres manquants de chaque tacheN?
	//		-> ou est-ce qu'on lui précise le dirIn et dirOut de la sequence?
	// Services en doublon, je viens de voir qu'il existait déjà, appelé bo et DBExecutionService + DBConversionService et DBUserService... Il faut faire le ménage dans tout ça, tous les tests ont été faits avec les services que j'ai créé?
	
	//rest/conv/scenario/{id}/run ->	run du scenario
	@RequestMapping(value="/conv/scenario/{id}/run", method = RequestMethod.POST)
	public ResponseEntity<ScenarioDetailledModel> run(@PathVariable("id") String id){
//			,@RequestBody ScenarioDetailledModel scenarioDetailledModel) {
		CoScenario coScenarioDb=dbExecutionService.findById(id);

		if (coScenarioDb == null) {
			return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
		}

		openConvService.launchSequence(new File(coScenarioDb.getFileName()), "COBRA_TO_S1000D", new File("D:\\output\\coco\\in"), new File("D:\\output\\coco\\result"),coScenarioDb);
//	    return new ResponseEntity<ScenarioDetailledModel>(scenarioDetailledModel, HttpStatus.CREATED);
	    return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
	}
	

}
