package com.sonovision.openconv.utils;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.sonovision.openconv.db.bo.DBConversionService;
import com.sonovision.openconv.db.dao.CoHistoryExeDao;
import com.sonovision.openconv.db.dao.CoParameterExeDao;
import com.sonovision.openconv.db.dao.CoScenarioDao;
import com.sonovision.openconv.db.dao.ConversionObjectDao;
import com.sonovision.openconv.db.dao.LogLineDao;
import com.sonovision.openconv.db.dao.TaskDao;
import com.sonovision.openconv.db.exception.DBNONullException;
import com.sonovision.openconv.db.exception.DBNOUniqueException;
import com.sonovision.openconv.db.vo.Conversion;
import com.sonovision.openconv.db.vo.ConversionObject;
import com.sonovision.openconv.db.vo.LogLine;
import com.sonovision.openconv.db.vo.Task;
import com.sonovision.openconv.db.vo.execution.CoHistoryExe;
import com.sonovision.openconv.db.vo.execution.CoParameterExe;
import com.sonovision.openconv.db.vo.execution.CoScenario;
import com.sonovision.openconv.db.vo.user.OpGroup;
import com.sonovision.openconv.db.vo.user.OpRole;
import com.sonovision.openconv.db.vo.user.OpUser;
import com.sonovision.openconv.service.FileService;
import com.sonovision.openconv.utils.db.UserDBHelper;

public abstract class TestDBHelper extends TestHelper {
	
	@Autowired
	protected UserDBHelper userDBHelper;

	@Autowired
	protected ConversionObjectDao conversionObjectDao;

	@Autowired
	protected LogLineDao logLineDao;

	@Autowired
	protected TaskDao taskDao;

	@Autowired
	protected DBConversionService dbConversionService;
	
	@Autowired
	protected CoHistoryExeDao coHistoryExeDao;
	
	@Autowired
	protected CoParameterExeDao coParameterExeDao;

	@Autowired
	protected CoScenarioDao coScenarioDao;
	
	@Autowired
	protected FileService fileService;

	protected void deleteAll() {
		logLineDao.deleteAll();
		conversionObjectDao.deleteAll();
		conversionDao.deleteAll();
		taskDao.deleteAll();
		userDBHelper.deleteAll();
		coHistoryExeDao.deleteAll();
		coParameterExeDao.deleteAll();
		coScenarioDao.deleteAll();
	}
	
	

	/**************************************************************
	 * Conversion
	 **************************************************************/

	protected Conversion getConversionWithoutSave() {
		return getConversionWithoutSave(1);
	}

	protected Conversion getConversionWithoutSave(int nbr) {
		Conversion conversion = new Conversion();
		conversion.setFolderIn("c:/testin" + nbr + "/");
		conversion.setFolderOut("c:/testout" + nbr + "/");
		conversion.setStartTime(1443351300000L);
		conversion.setStopTime(1443353300000L);
		conversion.setWorkFlowName("Workflow de test" + nbr);
		conversion.setWorkFlowSequence(nbr + "");
		return conversion;
	}

	protected List<Conversion> getConversionWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<Conversion> conversionList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			Conversion conversion = getConversionWithoutSave(i);
			Conversion c1 = dbConversionService.getOrSave(conversion);
			conversionList.add(c1);

		}
		return conversionList;
	}

	protected Conversion getConversionWithSave() throws DBNONullException, DBNOUniqueException {
		Conversion conversion = getConversionWithoutSave();
		dbConversionService.getOrSave(conversion);
		return conversion;
	}

	/**************************************************************
	 * Task
	 * @throws DBNOUniqueException 
	 * @throws DBNONullException 
	 **************************************************************/

	protected Task getTaskWithoutSave() throws DBNONullException, DBNOUniqueException {
		return getTaskWithoutSave(1);
	}

	protected Task getTaskWithoutSave(int nbr) throws DBNONullException, DBNOUniqueException {
		Task task = new Task();
		task.setActionId("Action" + nbr);
		task.setName("task" + nbr);
		Conversion c = getConversionWithSave();
		task.setConversionId(c.getId());
		task.setLogResult(nbr + "");
		return task;
	}

	protected List<Task> getTaskWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<Task> taskList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			Task task = getTaskWithoutSave(i);
			Task c1 = dbConversionService.getOrSave(task);
			taskList.add(c1);

		}
		return taskList;
	}

	protected Task getTaskWithSave() throws DBNONullException, DBNOUniqueException {
		Task task = getTaskWithoutSave();
		dbConversionService.getOrSave(task);
		return task;
	}

	/**************************************************************
	 * ConversionObject
	 * @throws DBNOUniqueException 
	 * @throws DBNONullException 
	 **************************************************************/

	protected ConversionObject getConversionObjectWithoutSave() throws DBNONullException, DBNOUniqueException {
		return getConversionObjectWithoutSave(1);
	}

	protected ConversionObject getConversionObjectWithoutSave(int nbr) throws DBNONullException, DBNOUniqueException {
		ConversionObject conversionObject = new ConversionObject();
		conversionObject.setIdentification("Identification" + nbr);
		Task t = getTaskWithSave();
		conversionObject.setTask(t);
		Conversion c = getConversionWithSave();
		conversionObject.setConversion(c);
		conversionObject.setLogResult(nbr + "");
		return conversionObject;
	}

	protected List<ConversionObject> getConversionObjectWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<ConversionObject> conversionObjectList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			ConversionObject conversionObject = getConversionObjectWithoutSave(i);

			ConversionObject c1 = dbConversionService.getOrSave(conversionObject);
			conversionObjectList.add(c1);

		}
		return conversionObjectList;
	}

	protected ConversionObject getConversionObjectWithSave() throws DBNONullException, DBNOUniqueException {
		ConversionObject conversionObject = getConversionObjectWithoutSave();
		dbConversionService.getOrSave(conversionObject);
		return conversionObject;
	}

	/**************************************************************
	 * LogLine
	 **************************************************************/

	protected LogLine getLogLineWithoutSave() {
		return getLogLineWithoutSave(1);
	}

	protected LogLine getLogLineWithoutSave(int nbr) {
		LogLine logLine = new LogLine();
		logLine.setMessage("Message" + nbr);
		logLine.setMessageLong("Message Long" + nbr);
		logLine.setLogResult(nbr + "");
		return logLine;
	}

	protected List<LogLine> getLogLineWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<LogLine> logLineList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			LogLine logLine = getLogLineWithoutSave(i);

			LogLine c1 = dbConversionService.getOrSave(logLine);
			logLineList.add(c1);

		}
		return logLineList;
	}
	
	/******************************************************************
	 * user
	 ******************************************************************/
	
	public OpUser getOpUserWithoutSave() {
		return userDBHelper.getOpUserWithoutSave();
	}

	public OpUser getOpUserWithoutSave(int nbr) {
		return userDBHelper.getOpUserWithoutSave(nbr);
	}

	public List<OpUser> getOpUserWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		return userDBHelper.getOpUserWithSave(nbr);
	}

	public OpUser getOpUserWithSave() throws DBNONullException, DBNOUniqueException {
		return userDBHelper.getOpUserWithSave();
	}
	
	/******************************************************************
	 * role
	 ******************************************************************/
	
	public OpRole getOpRoleWithoutSave() {
		return userDBHelper.getOpRoleWithoutSave();
	}

	public OpRole getOpRoleWithoutSave(int nbr) {
		return userDBHelper.getOpRoleWithoutSave(nbr);
	}

	public List<OpRole> getOpRoleWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		return userDBHelper.getOpRoleWithSave(nbr);
	}

	public OpRole getOpRoleWithSave() throws DBNONullException, DBNOUniqueException {
		return userDBHelper.getOpRoleWithSave();
	}
	
	
	
	/******************************************************************
	 * group
	 ******************************************************************/
	
	public OpGroup getOpGroupWithoutSave() {
		return userDBHelper.getOpGroupWithoutSave();
	}

	public OpGroup getOpGroupWithoutSave(int nbr) {
		return userDBHelper.getOpGroupWithoutSave(nbr);
	}

	public List<OpGroup> getOpGroupWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		return userDBHelper.getOpGroupWithSave(nbr);
	}

	public OpGroup getOpGroupWithSave() throws DBNONullException, DBNOUniqueException {
		return userDBHelper.getOpGroupWithSave();
	}
	
	
	
	/**************************************************************
	 * CoHistoryExe
	 **************************************************************/

	public CoHistoryExe getCoHistoryExeWithoutSave(int nbr) {
		Date dt = new Date();
		Calendar c = Calendar.getInstance(); 
		c.setTime(dt); 
		c.add(Calendar.DATE, 1);
		dt = c.getTime();
		CoHistoryExe coHistoryExe = new CoHistoryExe();
		coHistoryExe.setNbrFiles(nbr);
		coHistoryExe.setNbrNBloquant(nbr-1);
		coHistoryExe.setNbrNOK(nbr-1);
		coHistoryExe.setNbrOK(nbr-1);
		coHistoryExe.setStartTime(dt);
		coHistoryExe.setEndTime(c.getTime());
		return coHistoryExe;
	}

	public CoHistoryExe getCoHistoryExeWithoutSave() {
		return getCoHistoryExeWithoutSave(1);
	}

	public List<CoHistoryExe> getCoHistoryExeListWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<CoHistoryExe> coHistoryExeList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			CoHistoryExe coHistoryExe = getCoHistoryExeWithoutSave(i);
			CoHistoryExe c1 = coHistoryExeDao.getOrSave(coHistoryExe);
			coHistoryExeList.add(c1);

		}
		return coHistoryExeList;
	}
	

	public CoHistoryExe getCoHistoryExeWithSave() throws DBNONullException, DBNOUniqueException {
		CoHistoryExe coHistoryExe = getCoHistoryExeWithoutSave();
		coHistoryExeDao.getOrSave(coHistoryExe);
		return coHistoryExe;
	}
	
	
	
	/**************************************************************
	 * CoParameterExe
	 **************************************************************/
	public CoParameterExe getCoParameterExeWithoutSave(int nbr) {
		Date dt = new Date();
		Calendar c = Calendar.getInstance(); 
		c.setTime(dt); 
		c.add(Calendar.DATE, 1);
		dt = c.getTime();
		CoParameterExe coParameterExe = new CoParameterExe();
		coParameterExe.setParamName("ParamName"+nbr);
		coParameterExe.setParamValue("ParamValue"+nbr);
		coParameterExe.setTaskId("taskId"+nbr);
		return coParameterExe;
	}

	public CoParameterExe getCoParameterExeWithoutSave() {
		return getCoParameterExeWithoutSave(1);
	}

	public List<CoParameterExe> getCoParameterExeListWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<CoParameterExe> coParameterExeList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			CoParameterExe coParameterExe = getCoParameterExeWithoutSave(i);
			CoParameterExe c1 = coParameterExeDao.getOrSave(coParameterExe);
			coParameterExeList.add(c1);

		}
		return coParameterExeList;
	}
	

	public CoParameterExe getCoParameterExeWithSave() throws DBNONullException, DBNOUniqueException {
		CoParameterExe coParameterExe = getCoParameterExeWithoutSave();
		coParameterExeDao.getOrSave(coParameterExe);
		return coParameterExe;
	}
	
	
	
	/**************************************************************
	 * CoScenario
	 **************************************************************/
	
	public CoScenario getCoScenarioWithoutSave(int nbr) {
		Date dt = new Date();
		Calendar c = Calendar.getInstance(); 
		c.setTime(dt); 
		c.add(Calendar.DATE, 1);
		dt = c.getTime();
		CoScenario coScenario = new CoScenario();
		coScenario.addName("Fr_fr", "name1_"+nbr);
		coScenario.addName("Gb_en", "name2_"+nbr);
		coScenario.setCode("Code"+nbr);
		coScenario.setFileName("D:\\developpement\\workspaceOpenConv\\openconv\\src\\test\\resources\\workflow\\cobra\\cobraWF.xml");
//		coScenario.setFileName("fileName"+nbr);
		coScenario.setNbrStep(nbr);
		coScenario.setShared((byte)1);
		coScenario.setCreationDate(dt);
		coScenario.setModificationdate(c.getTime());
		coScenario.addDescr("Fr_fr", "descr1_"+nbr);
		coScenario.addDescr("Gb_en", "descr2_"+nbr);
		return coScenario;
	}

	public CoScenario getCoScenarioWithoutSave() {
		return getCoScenarioWithoutSave(1);
	}

	public List<CoScenario> getCoScenarioListWithSave(int nbr) throws DBNONullException, DBNOUniqueException {
		List<CoScenario> coScenarioList = new ArrayList<>();
		for (int i = 0; i < nbr; i++) {
			CoScenario coScenario = getCoScenarioWithoutSave(i);
			CoScenario c1 = coScenarioDao.getOrSave(coScenario);
			coScenarioList.add(c1);

		}
		return coScenarioList;
	}
	

	public CoScenario getCoScenarioWithSave() throws DBNONullException, DBNOUniqueException {
		CoScenario coScenario = getCoScenarioWithoutSave();
		coScenarioDao.getOrSave(coScenario);
		return coScenario;
	}

	/**
	 * @return the taskDao
	 */
	public TaskDao getTaskDao() {
		return taskDao;
	}

	/**
	 * @param taskDao
	 *            the taskDao to set
	 */
	public void setTaskDao(TaskDao taskDao) {
		this.taskDao = taskDao;
	}

	protected LogLine getLogLineWithSave() throws DBNONullException, DBNOUniqueException {
		LogLine logLine = getLogLineWithoutSave();
		dbConversionService.getOrSave(logLine);
		return logLine;
	}

	public DBConversionService getDbConversionService() {
		return dbConversionService;
	}

	public void setDbConversionService(DBConversionService dbConversionService) {
		this.dbConversionService = dbConversionService;
	}

	/**
	 * @return the conversionObjectDao
	 */
	public ConversionObjectDao getConversionObjectDao() {
		return conversionObjectDao;
	}

	/**
	 * @param conversionObjectDao
	 *            the conversionObjectDao to set
	 */
	public void setConversionObjectDao(ConversionObjectDao conversionObjectDao) {
		this.conversionObjectDao = conversionObjectDao;
	}

	public TestDBHelper() {

		userDBHelper = new UserDBHelper();
	}

	/**
	 * @return the logLineDao
	 */
	public LogLineDao getLogLineDao() {
		return logLineDao;
	}

	/**
	 * @param logLineDao
	 *            the logLineDao to set
	 */
	public void setLogLineDao(LogLineDao logLineDao) {
		this.logLineDao = logLineDao;
	}



	public UserDBHelper getUserDBHelper() {
		return userDBHelper;
	}



	public void setUserDBHelper(UserDBHelper userDBHelper) {
		this.userDBHelper = userDBHelper;
	}



	public CoHistoryExeDao getCoHistoryExeDao() {
		return coHistoryExeDao;
	}



	public void setCoHistoryExeDao(CoHistoryExeDao coHistoryExeDao) {
		this.coHistoryExeDao = coHistoryExeDao;
	}



	public CoParameterExeDao getCoParameterExeDao() {
		return coParameterExeDao;
	}



	public void setCoParameterExeDao(CoParameterExeDao coParameterExeDao) {
		this.coParameterExeDao = coParameterExeDao;
	}



	public CoScenarioDao getCoScenarioDao() {
		return coScenarioDao;
	}



	public void setCoScenarioDao(CoScenarioDao coScenarioDao) {
		this.coScenarioDao = coScenarioDao;
	}
	
	
	public int countCoScenarioInDB(){
		return this.coScenarioDao.findAll(CoScenario.class).size();
	}

}
