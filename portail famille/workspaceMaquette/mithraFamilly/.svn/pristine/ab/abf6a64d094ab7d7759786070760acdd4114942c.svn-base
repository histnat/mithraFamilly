package com.sonovision.openconv.wf.service.impl;

import java.io.File;
import java.io.InputStream;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.sonovision.openconv.db.bo.DBConversionService;
import com.sonovision.openconv.log.model.DBLogger;
import com.sonovision.openconv.log.model.LoggerType;
import com.sonovision.openconv.mapper.TaskMapper;
import com.sonovision.openconv.wf.WFTask;
import com.sonovision.openconv.wf.dao.WorkFlowDao;
import com.sonovision.openconv.wf.exception.WorkflowException;
import com.sonovision.openconv.wf.model.ParameterId;
import com.sonovision.openconv.wf.service.WorkFlowBo;
import com.sonovision.openconv.wf.xmodel.Action;
import com.sonovision.openconv.wf.xmodel.Parameter;
import com.sonovision.openconv.wf.xmodel.Sequence;
import com.sonovision.openconv.wf.xmodel.Task;
import com.sonovision.openconv.wf.xmodel.Workflow;
import com.sonovision.openconv.ws.manager.ParametersManager;


@Service("WorkFlowBo")
public class WorkFlowBoImpl implements WorkFlowBo {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1153709899063036726L;
	
	//message
		//it will be in properties file for multilingue
		private static final String MESSAGE_TASK_CREATED="d√©but de la tache %s";
	
	@Autowired
	@Qualifier("WorkFlowDaoXML")
	private WorkFlowDao wfd;
	
	@Autowired
	protected ParametersManager parametersManager;
	


	@Override
	public WFTask getWFTask(Action action, DBLogger dbLogger, HashMap<String, Object> parameter) throws WorkflowException {
		return getWFTask(action,dbLogger,parameter, dbLogger.getWorkflow());
	}
	
	@Override
	public WFTask getWFTask(Action action, DBLogger dbLogger, HashMap<String, Object> parameter, Workflow workflow) throws WorkflowException {
		if(action==null)
			return null;
		Task task=wfd.getTaskById(action.getTaskid(),workflow);
		return getWFTask(action,dbLogger,parameter, task);
	}
	
	@Override
	public WFTask getWFTask(Action action, DBLogger dbLogger, HashMap<String, Object> parameter,Task task) throws WorkflowException {
		WFTask wfTask=null;
		if(task==null)
		{
			throw new WorkflowException("task is null");
		}
		if(task.getClassName()==null)
		{
			throw new WorkflowException("className is null in task:"+task.getId());
		}
		
		Class clazz;
		try {
			//clazz = ClassLoader.getSystemClassLoader().loadClass(task.getClassName());
			clazz = Thread.currentThread().getContextClassLoader().loadClass(task.getClassName());
		} catch (ClassNotFoundException e1) {
			throw new WorkflowException("className not found in task:"+task.getId()+":"+task.getClassName(),e1);
		}
		if(clazz==null)
		{
			throw new WorkflowException(task.getClassName() +" can't be loaded in task:"+task.getId());
		}
		try{
			try {
				wfTask=(WFTask) clazz.newInstance();
			} catch (InstantiationException e) {
				throw new WorkflowException("className can't be created in task:"+task.getId(),e);
			} catch (IllegalAccessException e) {
				throw new WorkflowException("className can't be created in task:"+task.getId(),e);
			}
		}
		catch (ClassCastException e)
		{
			throw new WorkflowException(task.getClassName() +" can't be loaded in task:"+task.getId(), e);
		}
	
		com.sonovision.openconv.db.vo.Task dbTask = TaskMapper.getTask(task);
		
		dbTask.setActionId(action.getActionid());
		dbTask.setConversionId(dbLogger.getConversion().getId());
//		dbLogger.getConversion().addTask(dbTask);
		dbLogger.saveConversion();
		dbLogger.setTask(dbTask);
		wfTask.setDBLogger(dbLogger);
		wfTask.setId(task.getId().toString());
		wfTask.setParameter(parameter);
		if(task.getParameters()!=null && task.getParameters().getParameter()!=null && !task.getParameters().getParameter().isEmpty())
		{
			for(Parameter p:task.getParameters().getParameter())
			{
//				wfTask.addParameter(p.getKey(),p.getValue());
		    	ParameterId parameterId=new ParameterId();
		    	parameterId.setTaskId(task.getId().toString());
		    	parameterId.setParameterName(p.getKey());
				wfTask.addParameter(p.getKey(),parametersManager.getParam(parameterId).getValue());
			}
		}
		
		dbLogger.log(LoggerType.TASK, MESSAGE_TASK_CREATED.replaceAll("%s", task.getName()));
		
		return wfTask;
	}
	
	@Override
	public Workflow getWorkflow(File workflowName) throws WorkflowException {
		return wfd.loadWorkflow(workflowName);
	}
	
	@Override
	public Workflow getWorkflow(InputStream workflowName) throws WorkflowException {
		return wfd.loadWorkflow(workflowName);
	}

	@Override
	public Sequence getSequence(String sequenceId, Workflow wf) throws WorkflowException {
		return wfd.getSequence(wf, sequenceId);
	}

	/**
	 * @return the wfd
	 */
	public WorkFlowDao getWfd() {
		return wfd;
	}

	/**
	 * @param wfd the wfd to set
	 */
	public void setWfd(WorkFlowDao wfd) {
		this.wfd = wfd;
	}

	

	
	
	

}
