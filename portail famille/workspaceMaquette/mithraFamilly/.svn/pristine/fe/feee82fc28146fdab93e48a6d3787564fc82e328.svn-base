package com.sonovision.openconv.ws.controller;

import java.util.List;
import javax.annotation.Resource;
//import org.junit.Assert;
//import org.junit.Before;
//import org.junit.Test;
import static org.hamcrest.CoreMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.testng.Assert.assertEquals;


import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.charset.Charset;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.multipart.MultipartFile;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sonovision.openconv.db.exception.DBNONullException;
import com.sonovision.openconv.db.exception.DBNOUniqueException;
import com.sonovision.openconv.db.vo.execution.CoHistoryExe;
import com.sonovision.openconv.db.vo.execution.CoScenario;
import com.sonovision.openconv.db.vo.user.OpUser;
import com.sonovision.openconv.initdb.MakeCoHistoryExe;
import com.sonovision.openconv.initdb.MakeCoScenario;
import com.sonovision.openconv.initdb.MakeUser;
import com.sonovision.openconv.ws.config.AppConfig;
import com.sonovision.openconv.ws.controller.model.ScenarioDetailledModel;

import  org.hamcrest.Matchers.*;
//import static org.hamcrest.CoreMatchers.*;

@ContextConfiguration(classes = {AppConfig.class})
@WebAppConfiguration
public class ScenarioControllerPOSTTest extends AbstractTestNGSpringContextTests  {
    @Resource
    private WebApplicationContext wac;
    
    
    private MockMvc mockMvc;
    
    @Autowired
    MakeCoHistoryExe makeCoHistoryExe;
    @Autowired
    MakeCoScenario makeCoScenario;
    @Autowired
    MakeUser makeUser;
    
    
    private String username;
    private String scenarioName;
    
    private List<CoHistoryExe> coHistoryList;
    private List<CoScenario> coScenarioList;
    private OpUser myUser;
    
    public static final MediaType APPLICATION_JSON_UTF8 = new MediaType(
            MediaType.APPLICATION_JSON.getType(),
            MediaType.APPLICATION_JSON.getSubtype(), Charset.forName("utf8"));
    
    @BeforeClass
    public void init() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
//        makeCoHistoryExe.clean();
        makeCoScenario.clean();
        makeUser.clean();
        username="lee";
        scenarioName="myScenario";
        try {
//			coHistoryList=makeCoHistoryExe.getCoHistoryExeWithSave(5);
			coScenarioList=makeCoScenario.getCoScenarioListWithSave(6);
			myUser=makeUser.make("myUser");
		} catch (DBNONullException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DBNOUniqueException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
   }
    
    
    @Test
    public void save() throws Exception {
    	String requestPath="/rest/conv/scenario/save";
    	System.out.println("TEST : POST "+requestPath);
    	
    	assertEquals(makeCoScenario.countCoScenarioInDB(), coScenarioList.size());
    	mockMvc.perform(MockMvcRequestBuilders.post(requestPath)
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(new ScenarioDetailledModel(makeCoScenario.getOneCoScenarioWithoutSave(scenarioName, username))))
    			.accept(MediaType.APPLICATION_JSON))
//    			.andDo(print())
                .andExpect(status().isCreated());
    	assertEquals(makeCoScenario.countCoScenarioInDB(), coScenarioList.size()+1);
    }
    
    
    
    @Test (dependsOnMethods={"save"}, enabled=false)
    public void delete() throws Exception {
    	String requestPath1="/rest/conv/scenario/";
    	String requestPath2="/delete";
    	System.out.println("TEST : delete "+requestPath1+scenarioName+requestPath2);
    	makeCoScenario.getOneCoScenarioWithSave(scenarioName, username);
    	assertEquals(makeCoScenario.countCoScenarioInDB(), coScenarioList.size()+1);
    	mockMvc.perform(MockMvcRequestBuilders.delete(requestPath1+scenarioName+requestPath2)
    			.accept(MediaType.APPLICATION_JSON))
//    			.andDo(print())
                .andExpect(status().isOk());
    	assertEquals(makeCoScenario.countCoScenarioInDB(), coScenarioList.size());
    }
    
    public static String asJsonString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            final String jsonContent = mapper.writeValueAsString(obj);
            System.out.println(jsonContent);
            return jsonContent;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
  

}
