package com.sonovision.openconv.modules.fileaccess;

import java.io.File;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.sedoc.toolbox.SpringBeanProvider;
import com.sedoc.toolbox.bean.UtilsService;
import com.sonovision.openconv.log.model.DBLogger;
import com.sonovision.openconv.log.model.LoggerLevel;
import com.sonovision.openconv.mapper.TreatedObjectMapper;
import com.sonovision.openconv.model.TreatedObject;
import com.sonovision.openconv.service.FileService;
import com.sonovision.openconv.utils.FileAccess;
import com.sonovision.openconv.wf.WFTask;
import com.sonovision.openconv.wf.WFTaskHelper;
import com.sonovision.openconv.wf.model.ParameterDetailled;
import com.sonovision.openconv.wf.model.ParameterTypes;

@Component
public class TaskWriter extends WFTaskHelper implements WFTask {

	@Autowired
	UtilsService utilsService;
	
	@Autowired
    FileService fileService;

	public final static String PARAMETER_WRITER_OUTPUT_FOLDER = "outputFolder";

	String outputFile;

	// I must init spring composent, buti have loop on this class. this variable
	// is for skip loop. I think it will be better if we use @Configure. next
	// time
	private static boolean initrun = false;

	public TaskWriter() {
		super();
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -7764367737889004545L;

	public String run(HashMap<String, TreatedObject> treatedObjectHash) {
		initClass();
		dbLogger.logTask("Debut de l'ecriture des xml", LoggerLevel.INFO);
		if (treatedObjectHash == null || treatedObjectHash.isEmpty()) {
			dbLogger.logTask("Aucun xml a traiter", LoggerLevel.FATAL);
			return LoggerLevel.FATAL.getValue().toString();
		}

		/// first try outputFile = retrieveFrom dbLogger
		outputFile = dbLogger.getFolderOut();
		if (outputFile == null || outputFile.isEmpty()) {
			/// second try outputFile = retrieveFrom parameters
			outputFile = (String) parametersRunning.get(PARAMETER_WRITER_OUTPUT_FOLDER)+File.separator+dbLogger.getIdExe();
			dbLogger.setFolderOut(outputFile);
		}
		else{
			outputFile=fileService.getResultDirPath(outputFile);
		}
		if (outputFile == null || outputFile.isEmpty()) {
			dbLogger.logTask("indiquer un répertoire de sortie", LoggerLevel.FATAL);
			return LoggerLevel.FATAL.getValue().toString();
		}
		FileAccess.createDirectory(new File(outputFile));
		treatedObjectHash.values().stream().parallel().forEach((to) -> write(to));
		return dbLogger.getTask().getLogResult();
	}
	

	private TreatedObject write(TreatedObject to) {
		if (to == null)// It's not real FATAL, normaly it doesn't happen
		{
			return null;
		}
		if (to.getLastResultAction() != null && (to.getLastResultAction().equals(LoggerLevel.FATAL.toString())
				|| to.getLastResultAction().equals(LoggerLevel.ERROR.toString()))) {
			dbLogger.logObject("l'objet :" + to.getIdObject() + " n'est pas traité car il est en level : "
					+ to.getLastResultAction(), LoggerLevel.INFO, to.getIdObject());
			closeObject(DBLogger.getLoggerLevel(to.getLastResultAction()), to);
			return to;
		}
		dbLogger.logObject("ecriture fichier :" + outputFile + File.separator + to.getOutputName(), LoggerLevel.INFO,
				to.getIdObject());
		InputStream document = TreatedObjectMapper.getInputStream(to.getObjectConvert());
		utilsService.ecritFile(document, outputFile + File.separator + to.getOutputName());

		return to;
	}

	/**
	 * It can be replaced by @Configuration with aspectj spring but i don't know
	 * why it doesn't work TODO :make it generic in extends's class
	 */
	public void initClass() {
		if (!initrun) {
			initrun = true;
			if (utilsService == null) {
				utilsService = (UtilsService) SpringBeanProvider.getBean("UtilsService");
			}
			if (fileService == null) {
				fileService = (FileService) SpringBeanProvider.getBean("FileService");
			}
			
			initrun = false;
		}
	}

	/**
	 * @return the utilsService
	 */
	public UtilsService getUtilsService() {
		return utilsService;
	}

	/**
	 * @param utilsService
	 *            the utilsService to set
	 */
	public void setUtilsService(UtilsService utilsService) {
		this.utilsService = utilsService;
	}
	
	
	
	public FileService getFileService() {
		return fileService;
	}


	public void setFileService(FileService fileService) {
		this.fileService = fileService;
	}


	@Override
	public List<ParameterDetailled> getParameterList(Locale locale) {

		parametersRequired=new HashMap<>();
		parametersRequired.put(PARAMETER_WRITER_OUTPUT_FOLDER,ParameterTypes.FILE);
		return super.procedeParameterList(locale);
	}

}
