package com.sonovision.openconv.ws.controller;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.nio.file.FileSystem;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.sonovision.openconv.db.dao.CoHistoryExeDao;
import com.sonovision.openconv.db.dao.CoScenarioDao;
import com.sonovision.openconv.db.dao.ConversionDao;
import com.sonovision.openconv.db.dao.LogLineDao;
import com.sonovision.openconv.db.vo.LogLine;
import com.sonovision.openconv.db.vo.execution.CoHistoryExe;
import com.sonovision.openconv.db.vo.execution.CoScenario;
import com.sonovision.openconv.db.vo.user.OpUser;
import com.sonovision.openconv.wf.exception.WorkflowException;
import com.sonovision.openconv.wf.xmodel.Workflow;
import com.sonovision.openconv.ws.controller.model.HistoryDetailedModel;
import com.sonovision.openconv.ws.controller.model.HistoryProgressDetailedModel;
import com.sonovision.openconv.ws.controller.model.ScenarioDetailledModel;
import com.sonovision.openconv.ws.controller.model.ScenarioExecutionHistoryDetailedModel;
import com.sonovision.openconv.ws.controller.model.ScenarioMiniModel;
import com.sonovision.openconv.ws.controller.model.TaskLogModel;
import com.sonovision.openconv.ws.controller.util.ServiceMapper;

@RequestMapping("/rest")
//@CrossOrigin
@RestController
public class ScenarioControllerGET extends ControllerHelper{
	
	private final String RESULT_PATH="d://output//";
	private final String LOG_FILE_PATH="//log//";
	private final String RESULT_DIR_NAME="//result//";
	private final String LOGPDF_FILENAME="logPDF.pdf";

	public static final String TEMP_DIR="d://temp//";
	public static String ZIP_TEMP_NAME="output";
	/*
	 * 
	 *  LISTE DES SCENARIOS
	 * 
	 * */
	
//	/rest/conv/scenario	-> Liste des sc√©nario  OK
    @RequestMapping(value="/conv/scenario", method=RequestMethod.GET)
    public ResponseEntity<List<ScenarioMiniModel>> provideScenarioList() {
    	List<ScenarioMiniModel> scenarioList= serviceMapper.getScenarioListModel(dbExecutionService.listScenario());
         if(scenarioList==null || scenarioList.isEmpty())
        	 return new ResponseEntity("No Scenario found ", HttpStatus.NOT_FOUND);
         return  new ResponseEntity< List<ScenarioMiniModel>>(scenarioList, HttpStatus.OK);
    }
    

	/*
	 * 
	 *  DETAIL D'UN SCENARIO
	 * 
	 * */
    
//  /rest/conv/scenario/scenarioId	->	Detail du senario  OK
  @RequestMapping(value="/conv/scenario/{id}", method=RequestMethod.GET)
	public ResponseEntity<ScenarioDetailledModel> getScenario(@PathVariable("id") String id) {
	  ScenarioDetailledModel scenarioModel= serviceMapper.getScenarioDetailledModel(dbExecutionService.findById(id));
		if (scenarioModel == null) {
			return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity(scenarioModel, HttpStatus.OK);
	}
  
  
  
/////rest/conv/scenario/scenarioId/parameter	->	Liste des parametre par tache ????
// @RequestMapping(value="/conv/scenario/{scenarioId}/parameter", method=RequestMethod.GET)
//	public ResponseEntity<CoScenario> getListParamaterTask(@PathVariable("scenarioId") String scenarioId) {
//
// 	CoScenario coScenario = coScenarioDao.findOne(scenarioId, CoScenario.class);
//		if (coScenario == null) {
//			return new ResponseEntity("No Scenario found for ID " + scenarioId, HttpStatus.NOT_FOUND);
//		}
//		return new ResponseEntity(coScenario, HttpStatus.OK);
//	}
//    

    
////  /rest/conv/scenario/scenarioId/{idexecution}/Log	->	Renvoie le log  ???
//  @RequestMapping(value="/conv/scenario/{scenarioId}/{idexecution}/Log", method=RequestMethod.GET)
//	public ResponseEntity<List<LogLine>> getLog(@PathVariable("scenarioId") String scenarioId,@PathVariable("idexecution") String idexecution) {
//
//	  List<LogLine> logLines=logLineDao.findByConversionId(idexecution);
//  	return new ResponseEntity< List<LogLine>>(logLines, HttpStatus.OK);
//	}
//    
  
//  private static final String FILE_PATH = "d:\\sortie.pdf";
////  /rest/conv/scenario/scenarioId/{idexecution}/LogPDF	->	Renvoie le LogPDF  ???
//  @RequestMapping(value="/conv/scenario/{scenarioId}/{idexecution}/LogPDF", method=RequestMethod.GET)
//	public ResponseEntity<Resource> getLogPDF(@PathVariable("scenarioId") String scenarioId,@PathVariable("idexecution") String idexecution, HttpServletResponse response){
//	        	
//	        	File file=new File(FILE_PATH);
//	        	if (!file.exists()) {
//	    			return new ResponseEntity("File found for ID ", HttpStatus.NOT_FOUND);
//	    		}
//	        	return getDownloadFileResponseEntity(file);
//	}
    
	/*
	 * 
	 *  RESUME DE L'EXECUTION
	 * 
	 * */
  
//  /rest/conv/scenario/scenarioId/{idexecution}	->	Resume de l'execution OK
  @RequestMapping(value="/conv/scenario/{scenarioId}/{idexecution}", method=RequestMethod.GET)
	public ResponseEntity<HistoryDetailedModel>getResumeExec(@PathVariable("scenarioId") String scenarioId,@PathVariable("idexecution") String idexecution) {
	  HistoryDetailedModel historyDetailedModel= serviceMapper.getHistoryDetailedModel(dbExecutionService.get(scenarioId, idexecution));
	  if(historyDetailedModel==null)
     	 return new ResponseEntity("No historyList found ", HttpStatus.NOT_FOUND);	  
	  return new ResponseEntity(historyDetailedModel, HttpStatus.OK);

	}
    
  
	/*
	 * 
	 *  HISTORIQUE
	 * 
	 * */
  
  // /rest/conv/history	->	Renvoie tout l'historique d'execution OK
  @RequestMapping(value="/conv/history", method=RequestMethod.GET)
	public ResponseEntity<List<HistoryDetailedModel>>getHistory() {
	  List<HistoryDetailedModel> historyDetailedModelList= serviceMapper.getHistoryDetailedModelList(dbExecutionService.listHistory());

		  if(historyDetailedModelList==null || historyDetailedModelList.isEmpty())
	     	 return new ResponseEntity("No historyList found ", HttpStatus.NOT_FOUND);	  
		  return new ResponseEntity< List<HistoryDetailedModel>>(historyDetailedModelList, HttpStatus.OK);
	}
  
	/*
	 * 
	 *  LISTE DES SCENARIOS DE USERNAME
	 * 
	 * */
  
//rest/conv/scenario?username=jlee	->	Liste des scenarios de username
@RequestMapping(value="/conv/scenario", method=RequestMethod.GET,params = {"username"})
	public ResponseEntity<List<ScenarioMiniModel>> getScenarioByUser(@RequestParam("username") String username) {
	
	OpUser user=dbUserService.findUserByLogin(username);
	if(user==null)
		 return new ResponseEntity("No user found "+username, HttpStatus.NOT_FOUND);
	
	List<ScenarioMiniModel> scenarioList= serviceMapper.getScenarioListModel(dbExecutionService.list(user));
    if(scenarioList==null || scenarioList.isEmpty())
   	 return new ResponseEntity("No Scenario found for "+user.getLogin(), HttpStatus.NOT_FOUND);
    return  new ResponseEntity< List<ScenarioMiniModel>>(scenarioList, HttpStatus.OK);
	}
  
/*
 * SCENARIO SETUP
 *  DETAIL DU SCENARIO, AVEC SEULEMENT LES TACHES PARAMETRABLES
 * 
 * */
  
///rest/conv/scenario/scenarioId/setup ->	Detail du senario
@RequestMapping(value="/conv/scenario/{id}/setup", method=RequestMethod.GET)
public ResponseEntity<ScenarioDetailledModel> getScenarioSetup(@PathVariable("id") String id) {
	CoScenario coScenarioDb=dbExecutionService.findById(id);
	if (coScenarioDb == null) {
		return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
	}
	ScenarioDetailledModel scenarioModel= serviceMapper.getScenarioDetailledModel(coScenarioDb);
	try {
//		Workflow workflow=scenarioService.loadWorkflow(new File(scenarioService.getWorkflowDirectoryFilePath()+"/"+ coScenarioDb.getFileName()));
		
		Workflow workflow=workFlowBo.getWorkflow(new File(coScenarioDb.getFileName()));
//		Workflow workflow=scenarioService.loadWorkflow(new File(coScenarioDb.getFileName()));
		scenarioModel.setTaskList(serviceMapper.getListTaskModel(workflow,true));
	} catch (WorkflowException e) {
		return new ResponseEntity("Problem workfow :" + e, HttpStatus.NO_CONTENT);
	}

	return new ResponseEntity(scenarioModel, HttpStatus.OK);
	}

/*
 * SCENARIO EDIT
 *  DETAIL DU SCENARIO, AVEC TOUTES LES TACHES
 * 
 * */
  
///rest/conv/scenario/scenarioId/edit	->	Detail du senario
@RequestMapping(value="/conv/scenario/{id}/edit", method=RequestMethod.GET)
public ResponseEntity<ScenarioDetailledModel> getScenarioEdit(@PathVariable("id") String id) {
	CoScenario coScenarioDb=dbExecutionService.findById(id);
	if (coScenarioDb == null) {
		return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
	}
	ScenarioDetailledModel scenarioModel= serviceMapper.getScenarioDetailledModel(coScenarioDb);
	try {
//		Workflow workflow=scenarioService.loadWorkflow(new File(scenarioService.getWorkflowDirectoryFilePath()+"/"+ coScenarioDb.getFileName()));
		Workflow workflow=dbExecutionService.loadWorkflow(new File(coScenarioDb.getFileName()));
		scenarioModel.setTaskList(serviceMapper.getListTaskModel(workflow,false));
	} catch (WorkflowException e) {
		return new ResponseEntity("Problem workfow :" + e, HttpStatus.NO_CONTENT);
	}

	return new ResponseEntity(scenarioModel, HttpStatus.OK);
	}


/*
 * 
 *  LISTE DES SCENARIOS EXECUTES PAR USERNAME
 * 
 * */

//rest/conv/execution/list?username=jlee	->	Liste des scenarios par username
@RequestMapping(value="/conv/execution/list", method=RequestMethod.GET,params = {"username"})
public ResponseEntity<List<ScenarioExecutionHistoryDetailedModel>> getScenarioExecutedByUser(@RequestParam("username") String username) {

OpUser user=dbUserService.findUserByLogin(username);
if(user==null)
	 return new ResponseEntity("No user found "+username, HttpStatus.NOT_FOUND);

List<ScenarioExecutionHistoryDetailedModel> scenarioList= serviceMapper.getScenarioExecutionHistoryDetailedModeList(dbExecutionService.list(user));
if(scenarioList==null || scenarioList.isEmpty())
	 return new ResponseEntity("No Scenario found for "+user.getLogin(), HttpStatus.NOT_FOUND);
return  new ResponseEntity< List<ScenarioExecutionHistoryDetailedModel>>(scenarioList, HttpStatus.OK);
}



/*
 * 
 * EXECUTION PROGRESS
 * 
 * */
  
///rest/conv/execution/{id}/progress	->	Detail du senario
@RequestMapping(value="/conv/execution/{id}/progress", method=RequestMethod.GET)
public ResponseEntity<HistoryProgressDetailedModel> getExecutionProgress(@PathVariable("id") String id) {
	CoHistoryExe coHistoryExeDb=dbExecutionService.findByIdExe(id);
	if (coHistoryExeDb == null) {
		return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
	}
	HistoryProgressDetailedModel historyProgressDetailedModel= serviceMapper.getHistoryProgressDetailedModel(coHistoryExeDb);
	return new ResponseEntity(historyProgressDetailedModel, HttpStatus.OK);
}


/*
 * 
 * GET LOG PDF
 * 
 * */
  
///rest/conv/execution/{execId}/logPDF	->	t√©l√©chargement logPDF
@RequestMapping(value = "/conv/execution/{id}/logPDF", method = RequestMethod.GET)
public ResponseEntity<Resource> getLogPDF(@PathVariable("id") String id, 
    HttpServletResponse response) {
//	File file=new File(RESULT_PATH+"\\"+id+"\\"+LOG_FILE_PATH+LOGPDF_FILENAME);
	File file=new File(fileService.getLogPdfFilePath(folderOut+File.separator+id));
	if(!file.exists())
		return new ResponseEntity("No file found "+file.getAbsolutePath(), HttpStatus.NOT_FOUND);
    try {
        return ResponseEntity.ok()
                .headers(serviceMapper.getResponseHeaderFileDownload(file))
                .contentLength(file.length())
                .contentType(MediaType.parseMediaType("application/octet-stream"))
                .body(serviceMapper.getInputStreamResourceFileDownload(file));
    	} catch (IOException ex) {
      return new ResponseEntity("IOError writing file to output stream"+file.getAbsolutePath(), HttpStatus.NOT_FOUND);
    }

}


/*
 * 
 * GET OUTPUT ZIP
 * (TEMP_DIR, ZIP_TEMP_NAME + ".zip");
 * */
  
///rest/conv/execution/{execId}/result	->	t√©l√©chargement logPDF
@RequestMapping(value = "/conv/execution/{id}/result", method = RequestMethod.GET)
public ResponseEntity<Resource> getResult(@PathVariable("id") String id, 
    HttpServletResponse response) {
//	File fileInDir=new File(RESULT_PATH+"\\"+id+"\\"+RESULT_DIR_NAME);
	File fileInDir=new File(fileService.getResultDirPath(folderOut+File.separator+id));
	File tempFile;
	if(fileInDir==null || !fileInDir.exists() || !fileInDir.isDirectory())
		return new ResponseEntity("No directory found "+fileInDir.getAbsolutePath(), HttpStatus.NOT_FOUND);
    try {
    	 tempFile=serviceMapper.zipDirectory(fileInDir, fileService.getTempZipFilePath(id));

        return ResponseEntity.ok()
                .headers(serviceMapper.getResponseHeaderFileDownload(tempFile))
                .contentLength(tempFile.length())
                .contentType(MediaType.parseMediaType("application/octet-stream"))
                .body(serviceMapper.getInputStreamResourceFileDownload(tempFile));
    } catch (IOException ex) {
//      log.info("Error writing file to output stream. Filename was '{}'", fileName, ex);
//      throw new RuntimeException("IOError writing file to output stream");
      return new ResponseEntity("IOError writing file to output stream"+fileInDir.getAbsolutePath(), HttpStatus.NOT_FOUND);
    }

}



/*
 * 
 * EXECUTION PROGRESS LOG
 * 
 * */
  
///rest/conv/execution/{id}/log->	Log temps r√©el d'execution
@RequestMapping(value = "/conv/execution/{id}/log", method = RequestMethod.GET)
public ResponseEntity<List<TaskLogModel>> getExecutionLog(@PathVariable("id") String id) {
	List<TaskLogModel> toReturn;
	CoHistoryExe coHistoryExeDb=dbExecutionService.findByIdExe(id);
	if (coHistoryExeDb == null) {
		return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
	}
	CoScenario coScenarioDb=dbExecutionService.findById(coHistoryExeDb.getScenarioId());
	if (coScenarioDb == null) {
		return new ResponseEntity("No Scenario found for ID " + id, HttpStatus.NOT_FOUND);
	}
	try {
		Workflow workflow=dbExecutionService.loadWorkflow(new File(coScenarioDb.getFileName()));
		toReturn=serviceMapper.getListTaskLogModel(workflow);
		return new ResponseEntity(toReturn, HttpStatus.OK);
	} catch (WorkflowException e) {
		return new ResponseEntity("Problem workfow :" + e, HttpStatus.NO_CONTENT);
	} catch (UnsupportedEncodingException e) {
		// TODO Auto-generated catch block
		return new ResponseEntity("Problem workfow :" + e, HttpStatus.NO_CONTENT);
	}
}

}
