package com.sonovision.openconv.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.PropertySource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.sedoc.toolbox.LogMes;
import com.sedoc.toolbox.SpringBeanProvider;
import com.sonovision.openconv.db.bo.DBConversionService;
import com.sonovision.openconv.db.bo.DBExecutionService;
import com.sonovision.openconv.db.exception.DBNONullException;
import com.sonovision.openconv.db.exception.DBNOUniqueException;
import com.sonovision.openconv.db.vo.Task;
import com.sonovision.openconv.db.vo.execution.CoHistoryExe;
import com.sonovision.openconv.db.vo.execution.CoParameterExe;
import com.sonovision.openconv.db.vo.execution.CoScenario;
import com.sonovision.openconv.log.exception.LoggerException;
import com.sonovision.openconv.log.model.DBLogger;
import com.sonovision.openconv.log.model.LoggerLevel;
import com.sonovision.openconv.modules.fileaccess.exception.LoadFileException;
import com.sonovision.openconv.service.OpenConvService;
import com.sonovision.openconv.utils.FileAccess;
import com.sonovision.openconv.wf.exception.WorkflowException;
import com.sonovision.openconv.wf.service.WorkFlowBo;
import com.sonovision.openconv.wf.thread.SequenceThread;
import com.sonovision.openconv.wf.xmodel.Sequence;
import com.sonovision.openconv.wf.xmodel.Workflow;
import com.sonovision.openconv.ws.controller.util.ServiceMapper;

@Service("OpenConvService")
@PropertySource("classpath:openconv.properties")
public class OpenConvServiceImpl implements OpenConvService {

	@Value("#{propertiesFile['workflow_path']}")
	String worflowPath;

	@Autowired
	WorkFlowBo workFlowBo;

	@Autowired
	DBConversionService dbConversionService;
	
	@Autowired
	DBExecutionService dbExecutionService;
	
	
	@Autowired
	private ApplicationContext appContext;
	
	@Autowired
	protected ServiceMapper serviceMapper;

	static DBLogger dbLoggerMain;
	static boolean enCours = false;

	@Override
	public LoggerLevel launchSequence(File workflowFile, String sequenceId, File folderIn, File folderOut,CoScenario coScenario) {
		enCours = true;
		InputStream is = null;
		CoHistoryExe coHistoryExe=null;
		SpringBeanProvider.setApplicationContext2(appContext);
		
		try {
			coHistoryExe=dbExecutionService.create(coScenario.getId(),coScenario.getUserId());
		} catch (DBNONullException e) {
			// TODO Auto-generated catch block
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		} catch (DBNOUniqueException e) {
			// TODO Auto-generated catch block
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		}
		
		if (workflowFile == null) {
			is = FileAccess.getResourceFileStream(worflowPath);
		} else {
			if (!workflowFile.exists()) {
				LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the workflow file doesn't exist :" + workflowFile.getAbsolutePath());
				return LoggerLevel.FATAL;
			}
			try {
				is = new FileInputStream(workflowFile);
			} catch (FileNotFoundException e) {
				LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the workflow can't be loaded:" + e.getMessage());
				return LoggerLevel.FATAL;
			}
		}

		Workflow wf;
		try {
			wf = workFlowBo.getWorkflow(is);
		} catch (WorkflowException e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the workflow can't be loaded:" + e.getMessage());
			return LoggerLevel.FATAL;
		}
		Sequence s;
		try {
			s = workFlowBo.getSequence(sequenceId, wf);
		} catch (WorkflowException e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the sequence " + sequenceId + " can't be find in workflow:" + e.getMessage());
			return LoggerLevel.FATAL;
		}

		DBLogger dbLogger;
		try {
			dbLogger = new DBLogger(folderIn.getAbsolutePath(), folderOut.getAbsolutePath(), wf.getName(), s.getName());
		} catch (LoggerException e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem for create the logging context" + e.getMessage());
			return LoggerLevel.FATAL;
		}
		dbLogger.setWorkflow(wf);
		dbLoggerMain = dbLogger;

		HashMap<String, Object> parameter = new HashMap<>();
		SequenceThread st = new SequenceThread(dbLogger, parameter, s);
		

		try {
			List<CoParameterExe> listCoParameterExe=serviceMapper.getCoParameterExeList(wf,coHistoryExe);
			dbExecutionService.save(listCoParameterExe);
			coHistoryExe.setParameterList(listCoParameterExe);
			coHistoryExe.setNbrFiles(4);
			dbExecutionService.save(coHistoryExe);
		} catch (DBNONullException e) {
			// TODO Auto-generated catch block
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		} catch (DBNOUniqueException e) {
			// TODO Auto-generated catch block
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		} catch (LoadFileException e) {
			// TODO Auto-generated catch block
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		}
		
		st.run();

		LoggerLevel ll = dbConversionService.geLogLevelResult(dbLogger.getConversion());
		enCours = false;
		try {
			dbExecutionService.stop(coHistoryExe, 0, 0, 0);
		} catch (DBNONullException e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		} catch (DBNOUniqueException e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "the coHistoryExe can't be loaded:" + e.getMessage());
		}
		return ll;
	}

	@Override
	/**
	 * temporaire pour la demo GIFAS
	 */
	public String getResume(int idConversion) {
		if (dbLoggerMain == null)
			return "{}";
		Task t = dbConversionService.getTaskByConversionActionId(dbLoggerMain.getConversion(), idConversion + "");
		int nbrObject;
		String result = "{";
		nbrObject = dbConversionService.getCountConversionObjectByTask(t);

		int nbrObjectOk = dbConversionService.getCountConversionObjectByTaskOLogResult(t, "3");
		int nbrObjectNOk = dbConversionService.getCountConversionObjectByTaskOLogResult(t, "2");
		int nbrObjecterror = dbConversionService.getCountConversionObjectByTaskOLogResult(t, "1");
		System.out.println("task: nbr fichier:" + nbrObject + " nbrObjectOk:" + nbrObjectOk + "  tnbrObjectNOk:" + nbrObjectNOk + "  nbrObjecterror:" + nbrObjecterror);

		result += "\"nbrFichier\":\"" + nbrObject + "\",\"ok\":\"" + nbrObjectOk + "\",\"nok\":\"" + nbrObjectNOk + "\",\"error\":\"" + nbrObjecterror + "\"";

		return result + "}";
	}

	@Override
	public int getStatusSequence(int idConversion) {
		if (enCours)
			return 0;
		else
			return 1;
		/* a revoir */
		// if(dbLoggerMain==null)
		// return 1;
		// Conversion c= dbLoggerMain.getConversion();
		// if(c.getStopTime()==null)
		// return 0;
		// else
		// return 1;
	}

	public String getWorflowPath() {
		return worflowPath;
	}

	public void setWorflowPath(String worflowPath) {
		this.worflowPath = worflowPath;
	}

	public WorkFlowBo getWorkFlowBo() {
		return workFlowBo;
	}

	public void setWorkFlowBo(WorkFlowBo workFlowBo) {
		this.workFlowBo = workFlowBo;
	}

	public DBConversionService getDbConversionService() {
		return dbConversionService;
	}

	public void setDbConversionService(DBConversionService dbConversionService) {
		this.dbConversionService = dbConversionService;
	}

}
