package com.sonovision.openconv.modules.fractionnement;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.URIResolver;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.sedoc.dtdtoolbox.config.DTDCodeType;
import com.sedoc.dtdtoolbox.config.DTDConfigManager;
import com.sedoc.dtdtoolbox.datamodule.DataModuleCodeUtils;
import com.sedoc.dtdtoolbox.datamodule.DatamoduleMakerService;
import com.sedoc.dtdtoolbox.datamodule.DatamoduleXMLHelper;
import com.sedoc.dtdtoolbox.datamodule.EnumDMLCode;
import com.sedoc.dtdtoolbox.datamodule.EnumDataModuleCode;
import com.sedoc.dtdtoolbox.datamodule.impl.S1000DV41.maker.DatamoduleMakerDmrl.DmrlDtdSpecificCode;
import com.sedoc.dtdtoolbox.datamodule.model.DMCode;
import com.sedoc.dtdtoolbox.datamodule.model.DMDatamodule;
import com.sedoc.dtdtoolbox.datamodule.model.DMLCode;
import com.sedoc.dtdtoolbox.datamodule.model.DMLangue;
import com.sedoc.dtdtoolbox.utils.DTDParsing;
import com.sedoc.toolbox.LogMes;
import com.sedoc.toolbox.SpringBeanProvider;
import com.sedoc.toolbox.bean.UtilsService;
import com.sedoc.toolbox.bean.XMLFactoryService;
import com.sedoc.toolbox.bean.XSLTransformService;
import com.sonovision.openconv.db.vo.ConversionObject;
import com.sonovision.openconv.log.model.LoggerLevel;
import com.sonovision.openconv.mapper.TreatedObjectMapper;
import com.sonovision.openconv.model.ObjectType;
import com.sonovision.openconv.model.TreatedObject;
import com.sonovision.openconv.modules.fileaccess.TaskLoadFile;
import com.sonovision.openconv.modules.xslprocess.exception.XSLProcessException;
import com.sonovision.openconv.modules.xslprocess.resolver.XSLURIResolver;
import com.sonovision.openconv.utils.FileAccess;
import com.sonovision.openconv.wf.WFTask;
import com.sonovision.openconv.wf.WFTaskHelper;
import com.sonovision.openconv.wf.model.ParameterDetailled;
import com.sonovision.openconv.wf.model.ParameterTypes;
import com.sonovision.openconv.ws.controller.model.TaskParameterModel;
import com.sonovision.openconv.ws.controller.util.ServiceMapper;
import com.sonovision.openconv.ws.manager.AskParametersManager;
import com.sonovision.openconv.ws.manager.ParametersManager;

@Component("TaskFractionnementProcess")
@Scope(value = WebApplicationContext.SCOPE_SESSION)
public class TaskFractionnementProcess extends WFTaskHelper implements WFTask {


    @Autowired 
    private XMLFactoryService xmlFactoryService ;
	
	@Autowired
	private DTDConfigManager dtdConfigManager;

	static DTDParsing dtdParsing;
	
	
	public final static String PARAMETER_XPATH= "xpath";
	
	

	//I must init spring composent, buti have loop on this class. this variable is for skip loop. I think it will be better if we use @Configure. next time
	private static boolean initrun = false;

	
	private NodeList dmlEntries=null;
	
	private String paramXpath=null;
	
	
	static{
		dtdParsing = new DTDParsing();
	}

	public TaskFractionnementProcess() {

		super();
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -7764367737889004545L;

//	public final static String PARAMETER_DMRL_FILE_NAME="dmc";
//	
//	public final static String PARAMETER_DMRL_BREX_FILE_NAME="dmcBrex";
//	
//	public final static String HEADER_TESTING="key;techname;infoname;dmc;Modelic;SystemDiffCode;SystemCode;SubSystemCode;SubSubSystemCode;AssyCode;DisassyCode;DisassyCodeVariant;Infocode;InfocodeVariant;ItemLocationCode;LanguageIsoCode;CountryIsoCode;EnterpriseCode;EnterpriseName";

//
//	private String dmrlFileName;
//	
//	private String dmrlBrexFileName;


	public String run(HashMap<String, TreatedObject> treatedObjectHash) {
		initClass();
		if(!checkRequiredParams())
			return LoggerLevel.FATAL.getValue().toString();
		dbLogger.logTask("Debut de la transformation fractionnement", LoggerLevel.INFO);
		if (treatedObjectHash == null || treatedObjectHash.isEmpty()) {
			dbLogger.logTask("Aucun xml a traiter", LoggerLevel.FATAL);
			return LoggerLevel.FATAL.getValue().toString();
		}
		
		
		TreatedObject dmrlObject=null;
		//search for dmrlFile
		for(TreatedObject to1:treatedObjectHash.values()){
			if(to1.getObjectType().equals(ObjectType.DMRL)){
				dmrlObject=to1;
				break;
			}
		}
		if(dmrlObject==null){
			dbLogger.logTask("Pas de fichier DMRL", LoggerLevel.FATAL);
			return LoggerLevel.FATAL.getValue().toString();
		}
		else{
			InputStream document = TreatedObjectMapper.getInputStream(dmrlObject.getObjectConvert());
			
			Document docDML = null;
			try {
				if(document.markSupported())
					document.reset(); //reset inputstream cursor
				docDML = dtdParsing.getParseXML(document);
			} catch (IOException | ParserConfigurationException | SAXException e1) {
				dbLogger.logObject("Impossible de parser l'object :" + dmrlObject.getIdObject() + " erreur:" + e1.getMessage(),	LoggerLevel.ERROR, dmrlObject.getIdObject());
				return LoggerLevel.FATAL.getValue().toString();
			}
			try {
				dmlEntries = (NodeList) xmlFactoryService.executeXpathQuery(docDML, "//dmlEntry", true);
			} catch (Exception e) {
				dbLogger.logObject("Impossible de parser l'object :" + dmrlObject.getIdObject() + " erreur:" + e.getMessage(),	LoggerLevel.ERROR, dmrlObject.getIdObject());
				return LoggerLevel.FATAL.getValue().toString();
			}
	        if(dmlEntries==null || dmlEntries.getLength()==0)
            {
	        	dbLogger.logObject("Impossible de parser l'object :" + dmrlObject.getIdObject() + " erreur: pas de dmlEntry trouvÃ©" ,	LoggerLevel.ERROR, dmrlObject.getIdObject());
				return LoggerLevel.FATAL.getValue().toString();
            }
	        
	        
	        TreatedObject xmlObject=null;
			//search for xmlFile
			for(TreatedObject to2:treatedObjectHash.values()){
				if(to2.getObjectType().equals(ObjectType.XML)){
					xmlObject=to2;
					break;
				}
			}
			InputStream documentXml = TreatedObjectMapper.getInputStream(xmlObject.getObjectConvert());
			Document docXML = null;
			try {
				docXML = dtdParsing.getParseXML(documentXml);
			} catch (IOException | ParserConfigurationException | SAXException e1) {
				dbLogger.logObject("Impossible de parser l'object :" + xmlObject.getIdObject() + " erreur:" + e1.getMessage(),	LoggerLevel.ERROR, xmlObject.getIdObject());
				return LoggerLevel.FATAL.getValue().toString();
			}
			String dtdCode = DTDCodeType.S1000DV41.type;
			DatamoduleXMLHelper datamoduleXMLHelper=dtdConfigManager.getDatamoduleXMLHelper(dtdCode);
			DataModuleCodeUtils dataModuleCodeUtils=dtdConfigManager.getDataModuleCodeUtils(dtdCode);
			int taille = dmlEntries.getLength();
			while(--taille>-1)
			{
				Node dmlEntry = (Node) dmlEntries.item(taille);

		        Node dmcNode;
				try {
					dmcNode = (Node) xmlFactoryService.executeXpathQuery(dmlEntry,"./dmRef/dmRefIdent/dmCode", false);

		        DMCode dmCode= datamoduleXMLHelper.getDMCode(dmcNode);
		        

		        Node simpleParaNode = (Node) xmlFactoryService.executeXpathQuery(dmlEntry,"./remarks/simplePara", false);
		        String key=((Element)simpleParaNode).getTextContent();
		        String []keys=key.split("\\|");
//		        System.out.println(paramXpath);
		        String currentXpath=null;
		      //*[@key='{SimplePara|0}']
		        for(int i=0;i<keys.length;i++)
		        	currentXpath=paramXpath.replace("{SimplePara|"+i+"}", keys[i]);
		        		
		        		
//		        System.out.println(currentXpath);
		        Node resultNode = (Node) xmlFactoryService.executeXpathQuery(docXML,currentXpath/*"//subtask[@key='"+key+"']"*/, false);
		     
		        if(resultNode!=null){
		    	InputStream ips=nodeToInputStream(resultNode);

				TreatedObject to = new TreatedObject();
				to.setOutputName(dataModuleCodeUtils.getPrimaryCode(dmCode));
				to.setIdObject(key);
				to.setObjectConvert(ips);
				to.setObjectType("XML");
				treatedObjectHash.put(key, to);
//		    	Document doc = dtdParsing.getParseXML(ips);
//		    	utilsService.afficheXML(doc);
		        }
				} catch (Exception e) {
					dbLogger.logObject("Impossible de parser l'object :" + xmlObject.getIdObject() + " erreur:" + e.getMessage(),	LoggerLevel.ERROR, xmlObject.getIdObject());
					return LoggerLevel.FATAL.getValue().toString();
				}
			}

		}

		return dbLogger.getTask().getLogResult();

	}
	
	
	private InputStream nodeToInputStream(Node node) throws TransformerException {
	    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
	    Result outputTarget = new StreamResult(outputStream);
	    Transformer t = TransformerFactory.newInstance().newTransformer();
	    t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
	    t.transform(new DOMSource(node), outputTarget);
	    return new ByteArrayInputStream(outputStream.toByteArray());
	}


	/**
	 * It can be replaced by @Configuration with aspectj spring but i don't know
	 * why it doesn't work TODO :make it generic in extends's class
	 */
	public void initClass() {
		if (!initrun) {
			initrun = true;
			if (utilsService == null) {
				utilsService = (UtilsService) SpringBeanProvider.getBean("UtilsService");
			}
			if (dtdConfigManager == null) {
				dtdConfigManager = (DTDConfigManager) SpringBeanProvider.getBean("dtdConfigManager");
			}
			if (xmlFactoryService == null) {
				xmlFactoryService = (XMLFactoryService) SpringBeanProvider.getBean("XMLFactoryService");
			}
//			if(askParametersManager ==null){
//				askParametersManager = (AskParametersManager) SpringBeanProvider.getBean("AskParametersManager");
//			}
//			if(serviceMapper ==null){
//				serviceMapper = (ServiceMapper) SpringBeanProvider.getBean("ServiceMapper");
//			}
			initrun = false;
		}
	}
	


	@Override
	public HashMap<String, ParameterTypes> getRequiredParams() {

		parametersRequired=new HashMap<>();
		parametersRequired.put(PARAMETER_XPATH,ParameterTypes.TXT);
		return parametersRequired;
	}
//
//	@Override
//	public List<ParameterDetailled> getRequiredDetailledParameterList(Locale locale) {
//		getRequiredParams();
//		return super.procedeRequiredParameterList(locale);
//	}

	@Override
	public boolean checkRequiredParams() {
		// get parameter xsl file name
		paramXpath = (String) parametersRunning.get(PARAMETER_XPATH);
		return super.checkParams();
	}



	
}
