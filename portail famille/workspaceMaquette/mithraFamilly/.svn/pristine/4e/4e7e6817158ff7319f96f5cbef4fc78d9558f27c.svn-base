package com.sonovision.openconv.modules.xslprocess.helper;

import java.io.InputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.ibm.icu.text.DateFormat;
import com.ibm.icu.text.SimpleDateFormat;
import com.sedoc.dtdtoolbox.resource.model.Entity;
import com.sedoc.dtdtoolbox.resource.model.Resource;
import com.sedoc.toolbox.LogMes;
import com.sedoc.toolbox.SpringBeanProvider;
import com.sedoc.toolbox.bean.UtilsService;
import com.sedoc.toolbox.bean.XMLFactoryService;
import com.sonovision.openconv.codification.Codification;
import com.sonovision.openconv.codification.exception.CodificationException;
import com.sonovision.openconv.codification.impl.ListFileInOut;
import com.sonovision.openconv.db.cir.TotalCirTable;
import com.sonovision.openconv.log.model.DBLogger;
import com.sonovision.openconv.model.ObjectType;
import com.sonovision.openconv.model.TreatedObject;
import com.sonovision.openconv.modules.fileaccess.exception.LoadFileException;
import com.sonovision.openconv.modules.xmlprocess.model.ResourcesModel;
import com.sonovision.openconv.modules.xslprocess.helper.table.impl.GetTableCals;
import com.sonovision.openconv.modules.xslprocess.helper.table.impl.LoadHtmlTable;
import com.sonovision.openconv.modules.xslprocess.model.CirTypeKey;
import com.sonovision.openconv.modules.xslprocess.service.CirService;
import com.sonovision.openconv.service.impl.OpenConvServiceImpl;

public abstract class XSLHelperMain {

	static 	DBLogger dbLogger;
	
	static XMLFactoryService xmlf;
	
	static CirService cs;
	
	static NodeList dmrlList;
	
	static TotalCirTable totalCirTable;
	
//	static Object callingObjectToSynchronize;
	
	static Lock lock;
	
//	static Lock lockDmrl;
//	
//	static Lock lockCir;

	static UtilsService utilsService;
	
	static{
//		dbLogger= new DBLogger();
//		lockDmrl = new ReentrantLock();		
//		lockCir = new ReentrantLock();
		lock = new ReentrantLock();
	}
	
	/**
	 * it's just for test connection with this class from xsl
	 */
	public static void test()
	{
		System.out.println("test");
	}
	
//    
//	public static void lockDmrl()
//	{
//		lockDmrl.lock();
//		System.out.println("locked");
//	}
//	
//	public static void unlockDmrl()
//	{
//		lockDmrl.unlock();
//		System.out.println("unlocked");
//	}
//	
//	
//	public static void lockCir()
//	{
//		lockCir.lock();
//		System.out.println("locked");
//	}
//	
//	public static void unlockCir()
//	{
//		lockCir.unlock();
//		System.out.println("unlocked");
//	}
	
	
	public static void lock()
	{
		lock.lock();
		System.out.println("locked");
	}
	
	public static void unlock()
	{
		lock.unlock();
		System.out.println("unlocked");
	}
	
	
	/**
	 * log Message in database
	 * @param objectId  -  id of object on log is appliced
	 * @param level - level of message "INFO","WARN","ERROR", "FATAL", "DEBUG"
	 * @param message   -   message logged
	 */
	public static void logMessage(String objectId,String level,String message)
	{
		dbLogger.logObject(objectId, level,message);
	}
	
	public boolean matches(String text, String regex)
	{
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(text);
		return m.matches();
	}

	/**
	 * 
	 * @param htmlTab
	 * @return
	 */
	public static Node getCalsTabFromHtml(Node htmlTab){

		LoadHtmlTable lht=new LoadHtmlTable(htmlTab);
		GetTableCals gtc=null;
		try{
			lht.initTable();
			lht.load();
			gtc=new GetTableCals(lht.getLoadedTable());
			gtc.initDocument();
			gtc.generate();
//			gtc.display();
		}catch(Exception e){
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem for create the logging context"+e.getMessage());
		}
		return gtc.geteTable();
	}


	/**
	 * return quantity of resource found in original file
	 * @param xmlDmFilename
	 * @param codeFab
	 * @param refFab
	 * @return
	 */
	public static String getResourceCount(String xmlDmFilename, String codeFab, String refFab){
		Resource<Entity> resource = ResourcesModel.get(xmlDmFilename, codeFab, refFab);
		if(resource!=null)
			return String.valueOf(resource.getQte());
		else
			return null;
	}


	public static NodeList getPerson(String xmlDmFilename){

		Map<String, Resource<Entity>> mapResource = ResourcesModel.get(xmlDmFilename);
		List<Resource<Entity>> personnList = mapResource.values().stream().filter(x->x.getType()==x.getTypeOperateur()).collect(Collectors.toList());
		StringBuffer personXML = new StringBuffer();
		init();
		personXML.append("<personList>");
		for(Resource<Entity> person:personnList)
		{
			personXML.append(person.getXML());
		}
		personXML.append("</personList>");
		try {
			// System.out.println(sXML);
			return xmlf.parseXmlDoc(new InputSource(new StringReader(personXML.toString()))).getChildNodes();
		} catch (Exception ex) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem for create the logging context"+ex.getMessage());
			return null;
		}

	}

	public static String getRessourceId(String xmlDmFilename, String id)
	{
		Map<String, Resource<Entity>> mapResource = ResourcesModel.get(xmlDmFilename);
		Resource<Entity> r = mapResource.values().stream().filter(x->x.getIds().get(id)!=null).findFirst().get();
		List<Resource<Entity>> resourList= mapResource.values().stream().filter(x->x.getType()==r.getType()).collect(Collectors.toList());
		int i=0;
		while(resourList!=null && i<resourList.size() && !resourList.get(i).equals(r))
		{
			i++;
		}
		return (i+1)+"";
	}

	/**
	 *
	 * @param xmlDmFilename
	 * @return
	 */
	public static String getTime(String xmlDmFilename){

		Map<String, Resource<Entity>> mapResource = ResourcesModel.get(xmlDmFilename);
		BigDecimal sum ;
		 sum = mapResource
				.values()
				.stream()
				.filter(x -> x.getType()==x.getTypeDuree())
				.map(Resource::getTmi)
				.reduce(BigDecimal.ZERO,BigDecimal::add);


		return sum.toString();
	}

	public static void init()
	{
		if(xmlf==null)
		{
			xmlf=(XMLFactoryService)SpringBeanProvider.getBean("XMLFactoryService");
		}
		if(cs==null)
		{
			cs=(CirService)SpringBeanProvider.getBean("CirService");
		}
		if(utilsService==null)
		{
			utilsService=(UtilsService)SpringBeanProvider.getBean("UtilsService");
		}
	
	}
	
	
	public static <T> T loadService(Class<T> api) {
		 
        T result = null;
 
        ServiceLoader<T> impl = ServiceLoader.load(api);
 
        for (T loadedImpl : impl) {
            result = loadedImpl;
            if ( result != null ) break;
        }
 
//        if ( result == null ) throw new RuntimeException(
//            "Cannot find implementation for: " + api);
 
        return result;
 
    }
	
	
	/*
	 * 
	 * Gestion de la DMRL
	 * 
	 */
	
	//solution de synchro : appel à lock pour bloquer la valeur dmrlList.
	//------>>>> à lancer avant la transformation
	public static void initializeDMRLNodeList(Collection<TreatedObject> treatedObjectCollection2,DBLogger dbLogger2){
		InputStream isDmrl=null;
		 dbLogger=dbLogger2;
		if(xmlf==null)
		{
			xmlf=(XMLFactoryService)SpringBeanProvider.getBean("XMLFactoryService");
		}
		//lock
//		lockDmrl();
		lock();
		
		//search for DMRL
		for(TreatedObject treatedObject:treatedObjectCollection2){
			if(treatedObject.getObjectType().equals(ObjectType.DMRL)){
				isDmrl=(InputStream)(treatedObject.getObjectConvert());
				break;
			}
		}
		if(isDmrl!=null){
	      Document document;
	        try {
	        	if(isDmrl.markSupported())
	        		isDmrl.reset(); //reset inputstream cursor
	            document = xmlf.parseXmlDoc(isDmrl);
//	    		utilsService.afficheXML(document);
	            dmrlList = document.getChildNodes();
			}catch(Exception e){
				LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "getDMRL : xml non parsable : {0}"+e.getMessage());
			}
		}
		else
			dmrlList=null;
	}
	
	
	//Voir si dans la xsl, on l'appelle combien de fois? Si plusieurs fois dans la xsl, il faudra sortir le unlock().
	public static  NodeList getDMRL(){
			//unlock ????
//			unlockDmrl();
			return dmrlList;
		
	}
	
//	public static  NodeList getDMRL(){
//		//unlock ????
////		unlockDmrl();
//		return dmrlList.;
//	
//}
	//------>>>> à lancer impérativement en fin de transformation
	public static void cleanDMRLNodeList(){
		dmrlList=null;
//		unlockDmrl();
		unlock();
	}
	
	/*-------------------Fin gestion DMRL----------------------------*/
	
	/*
	 * 
	 * Gestion de la table de CIR
	 * 
	 */
	
	//------>>>> à lancer avant la transformation
	public static void initializeCirTable(TotalCirTable totalCirTable2,DBLogger dbLogger2){
//		lockCir();
		dbLogger=dbLogger2;
		lock();
		totalCirTable=totalCirTable2;
	}
	
	public static String pushTools(Node dataXml){
		return cs.push(totalCirTable,dataXml, CirTypeKey.TOOLS);
	}
	public static String pushSpare(Node dataXml){
		return cs.push(totalCirTable,dataXml, CirTypeKey.SPARE);
	}
	public static String pushIngredient(Node dataXml){
		return cs.push(totalCirTable,dataXml, CirTypeKey.INGREDIENT);
	}
	
	//------>>>> à lancer impérativement en fin de transformation
	public static void cleanCirTable(){
//		unlockCir();
		unlock();
		totalCirTable=null;
	}
	
	/*-------------------Fin gestion CIR----------------------------*/
	
	
	
	
//	public static Codification codification = loadService(Codification.class);
	
	public static String getNewFileNameCodification(String oldName,String codificationFilePath,String codificationClassUri){
		
		Class clazz=null;
		try {
			 clazz = Thread.currentThread().getContextClassLoader().loadClass(codificationClassUri);
			
		} catch (ClassNotFoundException e1) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem codification "+oldName+" : "+e1.getMessage());
		}
		if (clazz == null) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem codification "+oldName+" : "+codificationClassUri+" class cannot be loaded");
		}

		Codification codification = (Codification)SpringBeanProvider.getBean(clazz);

		String newName;
	    HashMap<String,Object>  parameter = new HashMap<>();
	    parameter.put(Codification.PARAMETER_LOADFILE_CODIFICATION_FILE, codificationFilePath);
		try {
		    codification.setCodificationParameter(parameter);
		    
			newName = codification.getNewFileName(oldName);
		} catch (CodificationException e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem codification "+oldName+" : "+e.getMessage());
			return null;
		}
		catch (Exception e) {
			LogMes.log(OpenConvServiceImpl.class, LogMes.FATAL, "problem codification "+oldName+" : "+e.getMessage());
			return null;
		}
		//pb : il y a des dmref sufixés pas PAR3, etc...
		if(newName!=null)
			return newName.replaceAll("(?i).xml", "");
		return null;
	}
	
	
	public static String getCurrentDate(String format){
		DateFormat dateFormat = new SimpleDateFormat(format);
		Date date = new Date();
		return dateFormat.format(date);
	}
	
}
