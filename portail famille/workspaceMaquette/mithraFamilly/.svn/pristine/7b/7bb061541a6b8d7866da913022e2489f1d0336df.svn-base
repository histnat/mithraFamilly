package com.sonovision.openconv.wf.service;

import java.io.File;
import java.io.InputStream;
import java.io.Serializable;
import java.util.HashMap;

import com.sonovision.openconv.log.model.DBLogger;
import com.sonovision.openconv.wf.WFTask;
import com.sonovision.openconv.wf.exception.WorkflowException;
import com.sonovision.openconv.wf.xmodel.Action;
import com.sonovision.openconv.wf.xmodel.Sequence;
import com.sonovision.openconv.wf.xmodel.Task;
import com.sonovision.openconv.wf.xmodel.Workflow;

public interface WorkFlowBo extends Serializable {

	/**
	 * Return object type WFTask with parameter in action
	 * @param action
	 * @param dbLogger
	 * @param parameter
	 * @return
	 * @throws WorkflowException 
	 */
	WFTask getWFTask(Action action, DBLogger dbLogger) throws WorkflowException;

	/**
	 * return object type WFTask with parameter in task
	 * @param action
	 * @param dbLogger
	 * @param parameter
	 * @param workflow - workflow where task is finder
	 * @return
	 * @throws WorkflowException 
	 */
	WFTask getWFTask(Action action, DBLogger dbLogger, Workflow workflow) throws WorkflowException;

	/**
	 * return object type WFTask with parameter in task
	 * @param action
	 * @param dbLogger
	 * @param parameter
	 * @param task
	 * @return
	 * @throws WorkflowException 
	 */
	WFTask getWFTask(Action action, DBLogger dbLogger, Task task) throws WorkflowException;

	/**
	 * load workflow 
	 * @param is
	 * @return
	 * @throws WorkflowException 
	 */
	Workflow getWorkflow(InputStream is) throws WorkflowException;

	/**
	 * return sequence from wf with id sequenceId
	 * @param sequenceId
	 * @param wf
	 * @return
	 * @throws WorkflowException 
	 */
	Sequence getSequence(String sequenceId, Workflow wf) throws WorkflowException;

	Workflow getWorkflow(File workflowName) throws WorkflowException;
	

}
