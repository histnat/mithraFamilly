/**
 * 
 */
package com.sonovision.openconv.db.cir;

import java.io.Serializable;
import java.util.HashMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import com.sonovision.openconv.db.vo.common.Common;
import com.sonovision.openconv.modules.xslprocess.model.CirTypeKey;

@Component("TotalCirTable")
@Scope(value = WebApplicationContext.SCOPE_SESSION)
public class TotalCirTable{
	
    private HashMap<Enum, HashMap<String,SessionStockageRes>> table;


    public TotalCirTable(){
    	table= new HashMap<>();
    	for(CirTypeKey cirType:CirTypeKey.values()){
    		table.put(cirType, new HashMap<>());
    	}
    }
    
	public HashMap<Enum, HashMap<String, SessionStockageRes>> getTable() {
		return table;
	}

	public void setTable(HashMap<Enum, HashMap<String, SessionStockageRes>> table) {
		this.table = table;
	}


	public String add(CirTypeKey typeKey, String key1, String key2, Node dataXml){
    	return add(typeKey,typeKey.getKey(key1, key2),dataXml);
    }
    
   //add if not exists
   public String add(CirTypeKey typeKey, String resKey, Node dataXml){
	   HashMap<String,SessionStockageRes> resTable=table.get(typeKey);
	   SessionStockageRes value=resTable.putIfAbsent(resKey, new SessionStockageRes(resKey,dataXml));
	   return resKey;
   }
   
//   <ITEMS>
//   		<ITEM>
//   			<VISIBLE_KEY>vkey</VISIBLE_KEY>
//   			<XMLDATA>...</XMLDATA>
//   			<HASH_KEY>hkey</HASH_KEY>
//   		</ITEM>
//   <ITEM>
//   			...
//   </ITEM>
//   </ITEMS>
   
   public Node getXML(String key) throws ParserConfigurationException{
	   DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
       DocumentBuilder builder = factory.newDocumentBuilder();
	   Element itemsElement=null;
	   Document newDoc = builder.newDocument();
	   CirTypeKey cirType=CirTypeKey.valueOf(key);
	   HashMap<String,SessionStockageRes> hashRessources=table.get(cirType);

   	for(SessionStockageRes sessionStockageRes:hashRessources.values()){
   		Node dataXml=sessionStockageRes.getDataXml();
   		if(itemsElement==null){
   		   itemsElement = newDoc.createElement("ITEMS");
           newDoc.appendChild(itemsElement);
   		}
   		//ITEM
   		Element itemElement = newDoc.createElement("ITEM");
   		//data
   		itemElement.appendChild(newDoc.importNode(dataXml, true));
   		//VISIBLE_KEY
   		Element vKeyElement = newDoc.createElement("VISIBLE_KEY");
   		vKeyElement.setTextContent(sessionStockageRes.getKeyHash());
   		itemElement.appendChild(vKeyElement);
   		//HASH KEY
   		Element hKeyElement = newDoc.createElement("HASH_KEY");
   		hKeyElement.setTextContent(key);
   		itemElement.appendChild(hKeyElement);
   		itemsElement.appendChild(itemElement);
   		
	}
   	return itemsElement;
   }

}
