package com.sonovision.openconv.modules.dmrlprocess;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.URIResolver;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import com.sedoc.dtdtoolbox.config.DTDCodeType;
import com.sedoc.dtdtoolbox.config.DTDConfigManager;
import com.sedoc.dtdtoolbox.datamodule.DataModuleCodeUtils;
import com.sedoc.dtdtoolbox.datamodule.DatamoduleMakerService;
import com.sedoc.dtdtoolbox.datamodule.EnumDMLCode;
import com.sedoc.dtdtoolbox.datamodule.EnumDataModuleCode;
import com.sedoc.dtdtoolbox.datamodule.impl.S1000DV41.maker.DatamoduleMakerDmrl.DmrlDtdSpecificCode;
import com.sedoc.dtdtoolbox.datamodule.model.DMCode;
import com.sedoc.dtdtoolbox.datamodule.model.DMDatamodule;
import com.sedoc.dtdtoolbox.datamodule.model.DMLCode;
import com.sedoc.dtdtoolbox.datamodule.model.DMLangue;
import com.sedoc.dtdtoolbox.utils.DTDParsing;
import com.sedoc.toolbox.SpringBeanProvider;
import com.sedoc.toolbox.bean.UtilsService;
import com.sedoc.toolbox.bean.XSLTransformService;
import com.sonovision.openconv.db.vo.ConversionObject;
import com.sonovision.openconv.log.model.LoggerLevel;
import com.sonovision.openconv.mapper.TreatedObjectMapper;
import com.sonovision.openconv.model.TreatedObject;
import com.sonovision.openconv.modules.fileaccess.TaskLoadFile;
import com.sonovision.openconv.modules.xslprocess.exception.XSLProcessException;
import com.sonovision.openconv.modules.xslprocess.resolver.XSLURIResolver;
import com.sonovision.openconv.utils.FileAccess;
import com.sonovision.openconv.wf.WFTask;
import com.sonovision.openconv.wf.WFTaskHelper;
import com.sonovision.openconv.wf.model.ParameterDetailled;
import com.sonovision.openconv.wf.model.ParameterTypes;
import com.sonovision.openconv.ws.controller.model.TaskParameterModel;
import com.sonovision.openconv.ws.controller.util.ServiceMapper;
import com.sonovision.openconv.ws.manager.AskParametersManager;
import com.sonovision.openconv.ws.manager.ParametersManager;

@Component("TaskCSVProcess")
@Scope(value = WebApplicationContext.SCOPE_SESSION)
public class TaskCSVProcess extends WFTaskHelper implements WFTask {



	
	@Autowired
	private DTDConfigManager dtdConfigManager;

	static DTDParsing dtdParsing;

	//I must init spring composent, buti have loop on this class. this variable is for skip loop. I think it will be better if we use @Configure. next time
	private static boolean initrun = false;
	
	
	
	static{
		dtdParsing = new DTDParsing();
	}

	public TaskCSVProcess() {

		super();
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -7764367737889004545L;

	public final static String PARAMETER_DMRL_FILE_NAME="dmc";
	
	public final static String PARAMETER_DMRL_BREX_FILE_NAME="dmcBrex";
	
	public final static String HEADER_TESTING="key;techname;infoname;dmc;Modelic;SystemDiffCode;SystemCode;SubSystemCode;SubSubSystemCode;AssyCode;DisassyCode;DisassyCodeVariant;Infocode;InfocodeVariant;ItemLocationCode;LanguageIsoCode;CountryIsoCode;EnterpriseCode;EnterpriseName";


	private String dmrlFileName;
	
	private String dmrlBrexFileName;


	public String run(HashMap<String, TreatedObject> treatedObjectHash) {
		initClass();
		if(!checkRequiredParams())
			return LoggerLevel.FATAL.getValue().toString();
		dbLogger.logTask("Debut de la transformation dmrl", LoggerLevel.INFO);
		if (treatedObjectHash == null || treatedObjectHash.isEmpty()) {
			dbLogger.logTask("Aucun xml a traiter", LoggerLevel.FATAL);
			return LoggerLevel.FATAL.getValue().toString();
		}

		treatedObjectHash.values().stream().forEach((to) -> doTransformation(to));
		return dbLogger.getTask().getLogResult();

	}
	
	
	private void addAskParameters(int step){
		List<TaskParameterModel> askParams=serviceMapper.getListAskedParameter(this,step);
		for(TaskParameterModel tpm:askParams){
			askParametersManager.addOrUpdate(tpm);
		}
//		askParameter=askParametersManager.hasAskParameters();
	}

	private URIResolver getURIResolver(String classNameUriResolver) throws XSLProcessException {
		Class clazz;
		URIResolver uriResolver = null;
		try {
			clazz = ClassLoader.getSystemClassLoader().loadClass(classNameUriResolver);
		} catch (ClassNotFoundException e1) {
			dbLogger.logTask("Impossible de charger le resolver :" + classNameUriResolver, LoggerLevel.FATAL);
			throw new XSLProcessException("Impossible de charger le resolver :" + classNameUriResolver);
		}
		if (clazz == null) {
			throw new XSLProcessException("Impossible de charger le resolver :" + classNameUriResolver);
		}
		try {
			uriResolver = (URIResolver) clazz.newInstance();
		} catch (InstantiationException e) {
			throw new XSLProcessException("Impossible de charger le resolver :" + classNameUriResolver);
		} catch (IllegalAccessException e) {
			throw new XSLProcessException("Impossible de charger le resolver :" + classNameUriResolver);
		}

		return uriResolver;

	}

	private TreatedObject doTransformation(TreatedObject to) {
		if(to.getLastResultAction()!=null && (to.getLastResultAction().equals(LoggerLevel.FATAL.toString())  || to.getLastResultAction().equals(LoggerLevel.ERROR.toString())))
		{
			dbLogger.logObject("l'objet :" + to.getIdObject() +" n'est pas traité car il est en level : "+to.getLastResultAction(), LoggerLevel.INFO, to.getIdObject());
			closeObject(dbLogger.getLoggerLevel(to.getLastResultAction()), to);
			return to;
		}
		
		InputStream document = TreatedObjectMapper.getInputStream(to.getObjectConvert());
		List<String[]> lines=dtdParsing.getParseCSV(document);
		
//		System.out.print(String.join(";",lines.get(0)));
		if(String.join(";",lines.get(0)).equals(HEADER_TESTING)){
			dbLogger.logObject("Debut conversion :" + to.getIdObject(), LoggerLevel.INFO, to.getIdObject());
			ConversionObject co = dbLogger.getConversionObject(to.getIdObject());




			String dtdCode = DTDCodeType.S1000DV41.type;
			DatamoduleMakerService datamoduleMakerService = dtdConfigManager.getDatamoduleMakerService(dtdCode);
			DMLCode dmlCode = getDMLCode(dmrlFileName,dtdCode);
			Document doc = datamoduleMakerService.getDMRL(dmlCode,parseDMDatamodule(lines),getDTDSpecific(dmrlFileName, dtdCode));
			//		utilsService.afficheXML(doc);


			InputStream ips = utilsService.convertDocToInputStream(doc);
			to.setObjectConvert(ips);
			to.setObjectType("dml");
			to.setLastResultAction(LoggerLevel.INFO.toString());
			closeObject(LoggerLevel.INFO, to);
		}
		return to;
	}

	/**
	 * It can be replaced by @Configuration with aspectj spring but i don't know
	 * why it doesn't work TODO :make it generic in extends's class
	 */
	public void initClass() {
		if (!initrun) {
			initrun = true;
			if (utilsService == null) {
				utilsService = (UtilsService) SpringBeanProvider.getBean("UtilsService");
			}
			if (dtdConfigManager == null) {
				dtdConfigManager = (DTDConfigManager) SpringBeanProvider.getBean("dtdConfigManager");
			}
//			if(askParametersManager ==null){
//				askParametersManager = (AskParametersManager) SpringBeanProvider.getBean("AskParametersManager");
//			}
//			if(serviceMapper ==null){
//				serviceMapper = (ServiceMapper) SpringBeanProvider.getBean("ServiceMapper");
//			}
			initrun = false;
		}
	}
	
	private List<DMDatamodule> parseDMDatamodule(List<String[]> lines){
		List<DMDatamodule> listDMDatamodule=new ArrayList<>();
		//remove the header
		lines.remove(0);
		for(String[] line: lines){
//			enterpriseCode;entrepriseName non utilisé pour l'instant
			DMCode dmCode=new DMCode();
			dmCode.setModelIdentCode(line[3]);
			dmCode.setSystemDiffCode(line[4]);
			dmCode.setSystemCode(line[5]);
			dmCode.setSubSystemCode(line[6]);
			dmCode.setSubSubSystemCode(line[7]);
			dmCode.setAssyCode(line[8]);
			dmCode.setDisassyCode(line[9]);
			dmCode.setDisassyCodeVariant(line[10]);
			dmCode.setInfoCode(line[11]);
			dmCode.setInfoCodeVariant(line[12]);
			dmCode.setItemLocationCode(line[13]);
			DMLangue dmLangue=new DMLangue();
			dmLangue.setExtensionCode(line[14]);
			dmLangue.setIsoCode(line[15]);
			DMDatamodule dmDatamodule=new DMDatamodule();
			dmDatamodule.setDmCode(dmCode);
			dmDatamodule.setInfoname("");
			dmDatamodule.setTechname(line[1]);
			dmDatamodule.setLangue(dmLangue);
			dmDatamodule.setEnterpriseCode(line[16]);
			dmDatamodule.setEnterpriseName(line[17]);
			dmDatamodule.setRemarks(line[0]);
			listDMDatamodule.add(dmDatamodule);
		}
		return listDMDatamodule;
	}

	private DMLCode getDMLCode(String nameFileResult, String dtdCode) {
		DataModuleCodeUtils dataModuleCodeUtils = dtdConfigManager
				.getDataModuleCodeUtils(dtdCode);
		Map<EnumDMLCode, String> parsedName = dataModuleCodeUtils
				.parseDMLCode(nameFileResult);
		DMLCode dmlCode = new DMLCode();
		dmlCode.setDmlType(parsedName.get(EnumDMLCode.DMLTYPE));
		dmlCode.setModelIdentCode(parsedName.get(EnumDMLCode.MODELIDENTCODE));
		dmlCode.setSenderIdent(parsedName.get(EnumDMLCode.SENDERIDENT));
		dmlCode.setSeqNumber(parsedName.get(EnumDMLCode.SEQNUMBER));
		dmlCode.setYearOfDataIssue(parsedName.get(EnumDMLCode.YEARODDATAISSUE));
		return dmlCode;
	}
	
	private HashMap<Enum, Object> getDTDSpecific(
			String dmrlFilename, String dtdCode) {

		DataModuleCodeUtils dataModuleCodeUtils = dtdConfigManager
				.getDataModuleCodeUtils(dtdCode);
		HashMap<Enum, Object> dtdSpecific = new HashMap<>();
		Map<EnumDMLCode, String> parsedName = dataModuleCodeUtils.parseDMLCode(dmrlFilename);
		dtdSpecific.put(DmrlDtdSpecificCode.INWORK,
				parsedName.get(EnumDMLCode.INWORK));
		dtdSpecific.put(DmrlDtdSpecificCode.ISSUENUMBER,
				parsedName.get(EnumDMLCode.ISSUENUMBER));

		dtdSpecific.put(DmrlDtdSpecificCode.DMCODE_BREX, getBrexDMCode(dtdCode));
		dtdSpecific.put(DmrlDtdSpecificCode.SECURITYCLASSIFICATION,
				getSecurityClassification());
		return dtdSpecific;
	}
	
    private DMCode getBrexDMCode(String dtdCode) {
		DataModuleCodeUtils dataModuleCodeUtils = dtdConfigManager
				.getDataModuleCodeUtils(dtdCode);
		Map<EnumDataModuleCode, String> parsedName=dataModuleCodeUtils.parseDataModuleCode(dmrlBrexFileName);
        DMCode dmCode = new DMCode();
        dmCode.setAssyCode(parsedName.get(EnumDataModuleCode.ASSY_CODE));
        dmCode.setDisassyCode(parsedName.get(EnumDataModuleCode.DISASSY_CODE));
        dmCode.setDisassyCodeVariant(parsedName.get(EnumDataModuleCode.DISASSY_CODE_VARIANT));
        dmCode.setInfoCode(parsedName.get(EnumDataModuleCode.INFO_CODE));
        dmCode.setInfoCodeVariant(parsedName.get(EnumDataModuleCode.INFO_CODE_VARIANT));
        dmCode.setItemLocationCode(parsedName.get(EnumDataModuleCode.ITEM_LOCATION_CODE));
        //TODO:Problem if we change modelIdentCode of projet
        dmCode.setModelIdentCode(parsedName.get(EnumDataModuleCode.MODEL_IDENT_CODE));
        dmCode.setSubSubSystemCode(parsedName.get(EnumDataModuleCode.SUB_SUB_SYSTEM_CODE));
        dmCode.setSubSystemCode(parsedName.get(EnumDataModuleCode.SUB_SYSTEM_CODE));
        dmCode.setSystemCode(parsedName.get(EnumDataModuleCode.SYSTEM_CODE));
        dmCode.setSystemDiffCode(parsedName.get(EnumDataModuleCode.SYSTEM_DIFF_CODE));
        return dmCode;
    }
    
    private String getSecurityClassification() {
        return "01";
    }

	
	@Override
	public HashMap<String, ParameterTypes> getRequiredParams() {

		parametersRequired=new HashMap<>();
		parametersRequired.put(PARAMETER_DMRL_FILE_NAME,ParameterTypes.TXT);
		parametersRequired.put(PARAMETER_DMRL_BREX_FILE_NAME,ParameterTypes.TXT);


		
		return parametersRequired;
	}
//
//	@Override
//	public List<ParameterDetailled> getRequiredDetailledParameterList(Locale locale) {
//		getRequiredParams();
//		return super.procedeRequiredParameterList(locale);
//	}

	@Override
	public boolean checkRequiredParams() {
		// get parameter xsl file name
		dmrlFileName = (String) parametersRunning.get(PARAMETER_DMRL_FILE_NAME);
		
		dmrlBrexFileName = (String) parametersRunning.get(PARAMETER_DMRL_BREX_FILE_NAME);
		return super.checkParams();
	}



	
}
