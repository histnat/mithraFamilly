package com.sedoc.toolbox.bean;

import com.sedoc.toolbox.bean.UtilsService;
import com.sedoc.toolbox.bean.impl.UtilsServiceImpl;

import java.io.File;
import java.io.InputStream;
import java.io.StringReader;
import java.util.Date;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;

import org.junit.*;

import static org.junit.Assert.*;
import junit.framework.TestCase;

import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

/**
 *
 * @author Frebeche
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({"/spring/spring.xml"})
@TestExecutionListeners(DependencyInjectionTestExecutionListener.class)
public class UtilsServiceTest  {
    
    @Autowired
    UtilsService utilsService;
    
    /**
     * Test of FloatToInt method, of class UtilsServiceImpl.
     */
    @Test
    public void testEscapeXML() {
        System.out.println("escapeXML");
        String test=null;
        String result = utilsService.escapeXML(test);
        assertEquals(null, result);
        

        test="";
        result = utilsService.escapeXML(test);
        assertEquals("", result);
        
        test="&";
        result = utilsService.escapeXML(test);
        assertEquals("&amp;", result);
        test="\"";
        result = utilsService.escapeXML(test);
        assertEquals("&quot;", result);
        test="<";
        result = utilsService.escapeXML(test);
        assertEquals("&lt;", result);
        test=">";
        result = utilsService.escapeXML(test);
        assertEquals("&gt;", result);
        test="'";
        result = utilsService.escapeXML(test);
        assertEquals("&apos;", result);
        test="&\"<>'";
        result = utilsService.escapeXML(test);
        assertEquals("&amp;&quot;&lt;&gt;&apos;", result);
                
    }

    /**
     * Test of FloatToInt method, of class UtilsServiceImpl.
     */
    @Test
    public void testFloatToInt() {
        System.out.println("FloatToInt");
        Float sF = 845.32F;
        int expResult = 845;
        int result = utilsService.floatToInt(sF);
        assertEquals(expResult, result);
        
        sF = 845.56F;
        result = utilsService.floatToInt(sF);
        assertEquals(expResult, result);
        
        sF = 845F;
        result = utilsService.floatToInt(sF);
        assertEquals(expResult, result);
                
    }

    /**
     * Test of DoubleToInt method, of class UtilsServiceImpl.
     */
    @Test
    public void testDoubleToInt() {
        System.out.println("DoubleToInt");
        Double sF = 845.32;
        int expResult = 845;
        int result = utilsService.doubleToInt(sF);
        assertEquals(expResult, result);
        sF = 845.56;
        result = utilsService.doubleToInt(sF);
        assertEquals(expResult, result);
        
        sF = 845.;
        result = utilsService.doubleToInt(sF);
        assertEquals(expResult, result);
    }

    /**
     * Test of strToInt method, of class UtilsServiceImpl.
     */
    @Test
    public void testStrToInt() {
        System.out.println("strToInt");
        String s = "5";
        int expResult = 5;
        int result = utilsService.strToInt(s);
        assertEquals(expResult, result);
        
        s="sdf";
        expResult=0;
        result = utilsService.strToInt(s);
        assertEquals(expResult, result);
        
        s="5.6";
        expResult=0;
        result = utilsService.strToInt(s);
        assertEquals(expResult, result);
                
    }

    /**
     * Test of strToFloat method, of class UtilsServiceImpl.
     */
    @Test
    public void testStrToFloat() {
        System.out.println("strToFloat");
        String s = "5.1";
        float expResult = 5.1F;
        float result = utilsService.strToFloat(s);
        assertEquals(expResult, result, 0.0);
        
        
        s = "5";
        expResult = 5F;
        result = utilsService.strToFloat(s);
        assertEquals(expResult, result, 0.0);
        
        s = "sqdfgqsg";
        expResult = 0F;
        result = utilsService.strToFloat(s);
        assertEquals(expResult, result, 0.0);
    }
    
    /**
     * Test of strToFloat method, of class UtilsServiceImpl.
     */
//    @Test
//    public void testGetXSLFile() {
//        System.out.println("getXSLFile");
//        
//        InputStream result = utilsService.getXSLFile("test.xsl");
//        assertNotNull(result);
//        
//    }
    
    /**
     * Test of strToFloat method, of class UtilsServiceImpl.
     */
    @Test
    public void testdir() {
        System.out.println("dir");
        String f=UtilsServiceTest.class.getResource("/dirTest").getFile().replaceAll("%20", " ");
        String[] result = utilsService.dir(f, null, null, null);
        assertNotNull(result);
        assertEquals(6,result.length);
        result = utilsService.dir(f, "essai", null, null);
        assertNotNull(result);
        assertEquals(3,result.length);
        result = utilsService.dir(f, null, "txt", null);
        assertNotNull(result);
        assertEquals(4,result.length);
        result = utilsService.dir(f, null, null, "[^0-9]+");
        assertNotNull(result);
        assertEquals(5,result.length);
        
    }
    
    /**
     * Test of convertSourceToInputSource, of class UtilsServiceImpl
     */
    @Test
    public void testConvertSourceToInputSource() 
    {
    	System.out.println("ConvertSourceToInputSource");
    	
    	String xmlString = "<?xml version=\"1.0\" encoding=\"utf-8\"?><root><firstElement>Test first element</firstElement><secondElement>Test second element</secondElement></root>";  

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  
        DocumentBuilder builder;  
        try  
        {  
            builder = factory.newDocumentBuilder();  
            Document document = builder.parse( new InputSource( new StringReader( xmlString ) ) );
            
            Source domSource = new DOMSource(document);
            
            InputSource inputSource = utilsService.convertSourceToInputSource(domSource);
            assertNotNull(inputSource);            
        } 
        catch (Exception e) 
        {
            e.printStackTrace();  
        }
    }
    
    /**
     * Test of GetFileCreationDate, of class UtilsServiceImpl
     */
    //le test est ignore car probleme de droit a l'execution sur bamboo
    @Ignore
    @Test
    public void testGetFileCreationDate()
    {
        System.out.println("GetFileCreationDate");
        String f=UtilsServiceTest.class.getResource("/dirTest/essai.txt").getFile().replaceAll("%20", " ");
        File file = new File(f);
        Date date = utilsService.getFileCreationDate(file);
        assertEquals(date.toString(), "Sat Nov 23 15:43:00 CET 2013");
    }
}
